{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"bqplot","text":"<p><code>bqplot</code> is a python based 2-D visualization system for Jupyter, based on the constructs of Grammar of Graphics. In <code>bqplot</code> every component of the plot is an interactive widget. This allows the user to seamlessly integrate <code>bqplot</code> with other Jupyter widgets to create rich visualizations by using just python code!</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Core Plotting Support for core plotting is provided</li> <li>Responsive Built using the same machinery that powers Jupyter widgets<ul> <li>Most of the attributes of <code>figure</code> and <code>mark</code> objects are implemented as traitlets which make the plots respond to data updates. After rendering the charts the attributes of the figures and marks can be updated in notebook cells down (or in callbacks) and changes are automatically reflected in the chart!</li> </ul> </li> <li>Selectors Selectors enable selecting slices of data<ul> <li>1D selectors Select slices of data along one dimension (x or y)</li> <li>2D selectors Select slices of data along two dimensions (x and y) using rectangular brushing</li> <li>Lasso Select slices of data along two dimensions (x and y) using a lasso</li> </ul> </li> <li>Jupyter Widget Integration Seamless integration and linking with Jupyter widgets</li> <li>Extensibility <code>Object Model</code> can be extended to build re-usable compound plotting widgets and widget libraries</li> <li>Dashboards/Apps Build rich interactive dashboards and apps by integrating <code>bqplot</code> with other Jupyter widget libraries and <code>voila</code> dashboarding tool</li> </ul> <p>While <code>bqplot</code> provides support for static plotting for most of the chart types, it really shines in interactive plotting where data attributes are updated in an event-driven fashion (using ipywidgets, click handlers etc.)</p>"},{"location":"#python-api","title":"Python API","text":"<p>Two APIs are provided in bqplot:</p> <ul> <li> <p>Pyplot</p> <ul> <li>Context-based API similar to matplotlib's pyplot</li> <li>Provides sensible default choices for most parameters</li> <li>Concise API</li> <li>Preferred API for most usecases</li> </ul> </li> <li> <p>Object Model</p> <ul> <li>Based on the constructs of Grammar of Graphics</li> <li>Users need to explicitly create <code>Figure</code>, <code>Mark</code>, <code>Axis</code> and <code>Scale</code> objects</li> <li>Verbose API</li> <li>Fully customizable</li> <li>Extensible</li> </ul> </li> </ul>"},{"location":"#usage","title":"Usage","text":""},{"location":"#pyplot","title":"pyplot","text":"<p><code>pyplot</code> is the best way to get started on <code>bqplot</code>. Creating a plot involves 3 steps:</p> <ul> <li>Create a figure object</li> <li>Create one or more marks (marks will be added to the above figure by default)</li> <li>Render the figure which is an instance of <code>DOMWidget</code></li> </ul> <p><pre><code>import bqplot.pyplot as plt\nimport numpy as np\nfig = plt.figure(title=\"Sine\")\n# create data vectors\nx = np.linspace(-10, 10, 200)\ny = np.sin(x)\n# create line mark\nline = plt.plot(x, y)\n# renders the figure in the output cell (with toolbar for panzoom, save etc.)\nplt.show()\n</code></pre> </p>"},{"location":"#object-model","title":"Object Model","text":"<p><code>Object Model</code> is a verbose (but fully customizable) API for creating plots. Creating a plot involves the following steps:</p> <ul> <li>Create <code>scales</code> for data attributes (x, y, color etc.)</li> <li>Create <code>marks</code> using the above scales</li> <li>Create <code>axes</code> objects using the above scales</li> <li>Finally create the <code>figure</code> object and pass the <code>marks</code> and <code>axes</code> as parameters</li> </ul> <p><pre><code>import numpy as np\nimport bqplot as bq\nx = np.linspace(-10, 10, 200)\ny = np.sin(x)\n# create scales\nxs = bq.LinearScale()\nys = bq.LinearScale()\n# create mark objects\nline = bq.Lines(x=x, y=y, scales={\"x\": xs, \"y\": ys})\n# create axes objects\nxax = bq.Axis(scale=xs, grid_lines=\"solid\", label=\"X\")\nyax = bq.Axis(scale=ys, orientation=\"vertical\", grid_lines=\"solid\")\n# create the figure object (renders in the output cell)\nbq.Figure(marks=[line], axes=[xax, yax], title=\"Sine\")\n</code></pre> </p>"},{"location":"#plot-enhancements","title":"Plot Enhancements","text":"<p>To enhance the plots (colors, grid lines, axes labels, ticks, legends etc.) you need to pass in additional parameters to the plotting widget constructors/methods. Let's look at an example:</p> <p><pre><code>fig = plt.figure(title=\"Sine\", legend_location=\"top-left\")\nx = np.linspace(-10, 10, 100)\n# multi line chart\ny = [np.sin(x), np.cos(x)]\n# customize axes\naxes_options = {\n\"x\": {\"label\": \"X\"},\n\"y\": {\"label\": \"Y\", \"tick_format\": \".2f\"}\n}\ncurves = plt.plot(\nx,\ny,\ncolors=[\"red\", \"green\"],\ndisplay_legend=True,\naxes_options=axes_options,\nlabels=[\"Sine\", \"Cosine\"]\n)\nfig\n</code></pre> </p>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Have a look at Usage section for more details on how to configure and customize various plots</p>"},{"location":"contributing/","title":"Contributing to bqplot","text":""},{"location":"contributing/#conforming-with-linters","title":"Conforming with linters","text":"<p>This projects uses both eslint and prettier and the plugin that creates the integration between both, eslint-plugin-prettier to lint its code.</p> <p>Currently there has been an active effort on making the project comply to all eslint rules so the eslint rules are currently not enforced.</p> <p>Prettier rules are enforced though and you can run them in the <code>js</code> folder with:</p> <pre><code>    yarn prettier --write . </code></pre> <p>The configuration of this project linters were based in the widgets-cookiecutter.</p>"},{"location":"contributing/#governance-and-code-of-conduct","title":"Governance and code of conduct","text":"<p>Bqplot is subject to the bqplot governance and the bqplot code of conduct.</p>"},{"location":"contributing/#questions","title":"Questions","text":"<p>Should you have any question, please do not hesitate to reach out to us on the ipywidgets gitter chat.</p>"},{"location":"contributing/#helpdocumentation","title":"Help/Documentation","text":"<ul> <li> <p>API reference documentation:  </p> </li> <li> <p>Talk to us on the <code>ipywidgets</code> Gitter chat: </p> </li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Using pip <pre><code>pip install bqplot\n</code></pre></p> <p>Using conda <pre><code>conda install -c conda-forge bqplot\n</code></pre></p> <p>If you are using JupyterLab &lt;= 2 <pre><code>jupyter labextension install @jupyter-widgets/jupyterlab-manager bqplot\n</code></pre></p>"},{"location":"installation/#development-installation","title":"Development installation","text":"<p>Development installation (requires JupyterLab version &gt;= 3 and yarn): <pre><code>$ git clone https://github.com/bqplot/bqplot.git\n$ cd bqplot\n$ pip install -e .\n$ jupyter nbextension install --py --overwrite --symlink --sys-prefix bqplot\n$ jupyter nbextension enable --py --sys-prefix bqplot\n</code></pre></p> <p>Note for developers: the <code>--symlink</code> argument on Linux or OS X allows one to modify the JavaScript code in-place. This feature is not available with Windows.</p> <p>For the experimental JupyterLab extension, install the Python package, make sure the Jupyter widgets extension is installed, and install the bqplot extension:</p> <pre><code>$ pip install \"ipywidgets&gt;=7.6\"\n$ jupyter labextension develop . --overwrite\n</code></pre> <p>Whenever you make a change of the JavaScript code, you will need to rebuild:</p> <p><pre><code>cd js\nyarn run build\n</code></pre> Refreshing the JupyterLab/Jupyter Notebook is enough to reload the changes.</p>"},{"location":"installation/#running-tests","title":"Running tests","text":"<p>You can install the dependencies necessary to run the tests with:</p> <pre><code>    conda env update -f test-environment.yml\n</code></pre> <p>And run it with for Python tests:</p> <pre><code>    pytest\n</code></pre> <p>And <code>cd js</code> to run the JS tests with:</p> <pre><code>yarn run test\n</code></pre> <p>Every time you make a change on your tests it's necessary to rebuild the JS side:</p> <pre><code>yarn run build\n</code></pre>"},{"location":"installation/#installation-of-older-versions","title":"Installation Of Older Versions","text":"<p>(Only for JupyterLab &lt;= 2) In order to install a previous bqplot version, you need to know which front-end version (JavaScript) matches with the back-end version (Python).</p> <p>For example, in order to install bqplot <code>0.11.9</code>, you need the labextension version <code>0.4.9</code>.</p> <pre><code>$ pip install bqplot==0.11.9\n$ jupyter labextension install bqplot@0.4.9\n</code></pre> <p>Versions lookup table:</p> <code>back-end (Python)</code> <code>front-end (JavaScript)</code> 0.12.14 0.5.14 0.12.13 0.5.13 0.12.12 0.5.12 0.12.11 0.5.11 0.12.10 0.5.10 0.12.9 0.5.9 0.12.8 0.5.8 0.12.7 0.5.7 0.12.6 0.5.6 0.12.4 0.5.4 0.12.3 0.5.3 0.12.2 0.5.2 0.12.1 0.5.1 0.12.0 0.5.0 0.11.9 0.4.9 0.11.8 0.4.8 0.11.7 0.4.7 0.11.6 0.4.6 0.11.5 0.4.5 0.11.4 0.4.5 0.11.3 0.4.4 0.11.2 0.4.3 0.11.1 0.4.1 0.11.0 0.4.0"},{"location":"installation/#contributing-to-bqplot","title":"Contributing To <code>bqplot</code>","text":"<p>See our contributing guidelines to know how to contribute and set up a development environment.</p>"},{"location":"installation/#license","title":"License","text":"<p>This software is licensed under the Apache 2.0 license. See the LICENSE file for details.</p>"},{"location":"api/axes/","title":"Axes","text":""},{"location":"api/axes/#bqplot.Axis","title":"<code>bqplot.Axis</code>","text":"<p>         Bases: <code>BaseAxis</code></p> <p>A line axis.</p> <p>A line axis is the visual representation of a numerical or date scale.</p> ATTRIBUTE DESCRIPTION <code>icon</code> <p>The font-awesome icon name for this object.</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>axis_types</code> <p>A registry of existing axis types.</p> <p> TYPE: <code>dict (class-level attribute)</code> </p> <code>orientation</code> <p>The orientation of the axis, either vertical or horizontal</p> <p> TYPE: <code>{'horizontal', 'vertical'}</code> </p> <code>side</code> <p>The side of the axis, either bottom, top, left or right.</p> <p> TYPE: <code>{'bottom', 'top', 'left', 'right'} or None (default: None)</code> </p> <code>label</code> <p>The axis label</p> <p> TYPE: <code>string (default: '')</code> </p> <code>tick_format</code> <p>The tick format for the axis, for dates use d3 string formatting.</p> <p> TYPE: <code>string or None (default: '')</code> </p> <code>scale</code> <p>The scale represented by the axis</p> <p> TYPE: <code>Scale</code> </p> <code>num_ticks</code> <p>If tick_values is None, number of ticks</p> <p> TYPE: <code>int or None (default: None)</code> </p> <code>tick_values</code> <p>Tick values for the axis</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p> <code>tick_labels</code> <p>Override the tick labels with a dictionary of {value: label}. Entries are optional, and if not provided, the default tick labels will be used.</p> <p> TYPE: <code>dict (default: None)</code> </p> <code>offset</code> <p>Contains a scale and a value {'scale': scale or None, 'value': value of the offset} If offset['scale'] is None, the corresponding figure scale is used instead.</p> <p> TYPE: <code>dict (default: {})</code> </p> <code>label_location</code> <p>The location of the label along the axis, one of 'start', 'end' or 'middle'</p> <p> TYPE: <code>{'middle', 'start', 'end'}</code> </p> <code>label_color</code> <p>The color of the axis label</p> <p> TYPE: <code>Color or None (default: None)</code> </p> <code>grid_lines</code> <p>The display of the grid lines</p> <p> TYPE: <code>{'none', 'solid', 'dashed'}</code> </p> <code>grid_color</code> <p>The color of the grid lines</p> <p> TYPE: <code>Color or None (default: None)</code> </p> <code>color</code> <p>The color of the line</p> <p> TYPE: <code>Color or None (default: None)</code> </p> <code>label_offset</code> <p>Label displacement from the axis line. Units allowed are 'em', 'px' and 'ex'. Positive values are away from the figure and negative values are towards the figure with respect to the axis line.</p> <p> TYPE: <code>string or None (default: None)</code> </p> <code>visible</code> <p>A visibility toggle for the axis</p> <p> TYPE: <code>bool (default: True)</code> </p> <code>tick_style</code> <p>Dictionary containing the CSS-style of the text for the ticks. For example: font-size of the text can be changed by passing <code>{'font-size': 14}</code></p> <p> TYPE: <code>Dict (default: {})</code> </p> <code>tick_rotate</code> <p>Degrees to rotate tick labels by.</p> <p> TYPE: <code>int (default: 0)</code> </p>"},{"location":"api/axes/#bqplot.ColorAxis","title":"<code>bqplot.ColorAxis</code>","text":"<p>         Bases: <code>Axis</code></p> <p>A colorbar axis.</p> <p>A color axis is the visual representation of a color scale.</p> ATTRIBUTE DESCRIPTION <code>scale</code> <p>The scale represented by the axis</p> <p> TYPE: <code>ColorScale</code> </p>"},{"location":"api/figure/","title":"Figure","text":""},{"location":"api/figure/#bqplot.Figure","title":"<code>bqplot.Figure</code>","text":"<p>         Bases: <code>DOMWidget</code></p> <p>Main canvas for drawing a chart.</p> <p>The Figure object holds the list of Marks and Axes. It also holds an optional Interaction object that is responsible for figure-level mouse interactions, the \"interaction layer\".</p> <p>Besides, the Figure object has two reference scales, for positioning items in an absolute fashion in the figure canvas.</p>"},{"location":"api/figure/#bqplot.Figure--style-attributes","title":"Style Attributes","text":"ATTRIBUTE DESCRIPTION <code>title</code> <p>title of the figure</p> <p> TYPE: <code>string (default: '')</code> </p> <code>axes</code> <p>list containing the instances of the axes for the figure</p> <p> TYPE: <code>List of Axes (default: [])</code> </p> <code>marks</code> <p>list containing the marks which are to be appended to the figure</p> <p> TYPE: <code>List of Marks (default: [])</code> </p> <code>interaction</code> <p>optional interaction layer for the figure</p> <p> TYPE: <code>Interaction or None (default: None)</code> </p> <code>scale_x</code> <p>Scale representing the x values of the figure</p> <p> TYPE: <code>Scale</code> </p> <code>scale_y</code> <p>Scale representing the y values of the figure</p> <p> TYPE: <code>Scale</code> </p> <code>padding_x</code> <p>Padding to be applied in the horizontal direction of the figure around the data points, proportion of the horizontal length</p> <p> TYPE: <code>Float (default: 0.0)</code> </p> <code>padding_y</code> <p>Padding to be applied in the vertical direction of the figure around the data points, proportion of the vertical length</p> <p> TYPE: <code>Float (default: 0.025)</code> </p> <code>legend_location</code> <p>'bottom-left', 'bottom', 'bottom-right', 'right'} location of the legend relative to the center of the figure</p> <p> TYPE: <code>{'top-right', 'top', 'top-left', 'left',</code> </p> <code>background_style</code> <p>CSS style to be applied to the background of the figure</p> <p> TYPE: <code>Dict (default: {})</code> </p> <code>legend_style</code> <p>CSS style to be applied to the SVG legend e.g, {'fill': 'white'}</p> <p> TYPE: <code>Dict (default: {})</code> </p> <code>legend_text</code> <p>CSS style to be applied to the legend text e.g., {'font-size': 20}</p> <p> TYPE: <code>Dict (default: {})</code> </p> <code>title_style</code> <p>CSS style to be applied to the title of the figure</p> <p> TYPE: <code>Dict (default: {})</code> </p> <code>animation_duration</code> <p>Duration of transition on change of data attributes, in milliseconds.</p> <p> TYPE: <code>nonnegative int (default: 0)</code> </p>"},{"location":"api/figure/#bqplot.Figure--layout-attributes","title":"Layout Attributes","text":"ATTRIBUTE DESCRIPTION <code>pixel_ratio</code> <p>Pixel ratio of the WebGL canvas (2 on retina screens). Set to 1 for better performance, but less crisp edges. If set to None it will use the browser's window.devicePixelRatio.</p> <p> </p> <code>display_toolbar</code> <p>Show or hide the integrated toolbar.</p> <p> TYPE: <code>boolean (default: True)</code> </p> <code>fig_margin</code> <p>Dictionary containing the top, bottom, left and right margins. The user is responsible for making sure that the width and height are greater than the sum of the margins.</p> <p> TYPE: <code>dict (default: {top=60, bottom=60, left=60, right=60})</code> </p> <code>min_aspect_ratio</code> <p>minimum width / height ratio of the figure</p> <p> TYPE: <code>float</code> </p> <code>max_aspect_ratio</code> <p>maximum width / height ratio of the figure</p> <p> TYPE: <code>float</code> </p> <p>Note</p> <p>The aspect ratios stand for width / height ratios.</p> <ul> <li>If the available space is within bounds in terms of min and max aspect ratio, we use the entire available space.</li> <li>If the available space is too oblong horizontally, we use the client height and the width that corresponds max_aspect_ratio (maximize width under the constraints).</li> <li>If the available space is too oblong vertically, we use the client width and the height that corresponds to min_aspect_ratio (maximize height under the constraint). This corresponds to maximizing the area under the constraints.</li> </ul> <p>Default min and max aspect ratio are both equal to 16 / 9.</p>"},{"location":"api/figure/#bqplot.figure.Figure.get_png_data","title":"<code>get_png_data(callback, scale=None)</code>","text":"<p>Gets the Figure as a PNG memory view</p> PARAMETER DESCRIPTION <code>callback</code> <p>Called with the PNG data as the only positional argument.</p> <p> </p> <code>scale</code> <p>Scale up the png resolution when scale &gt; 1, when not given base this on the screen pixel ratio.</p> <p> DEFAULT: <code>None</code> </p>"},{"location":"api/figure/#bqplot.figure.Figure.save_png","title":"<code>save_png(filename='bqplot.png', scale=None)</code>","text":"<p>Saves the Figure as a PNG file</p> PARAMETER DESCRIPTION <code>filename</code> <p>name of the saved file</p> <p> DEFAULT: <code>'bqplot.png'</code> </p> <code>scale</code> <p>Scale up the png resolution when scale &gt; 1, when not given base this on the screen pixel ratio.</p> <p> DEFAULT: <code>None</code> </p>"},{"location":"api/figure/#bqplot.figure.Figure.save_svg","title":"<code>save_svg(filename='bqplot.svg')</code>","text":"<p>Saves the Figure as an SVG file</p> PARAMETER DESCRIPTION <code>filename</code> <p>name of the saved file</p> <p> DEFAULT: <code>'bqplot.svg'</code> </p>"},{"location":"api/interactions/","title":"Interactions","text":""},{"location":"api/interactions/#bqplot.interacts.BrushIntervalSelector","title":"<code>bqplot.interacts.BrushIntervalSelector</code>","text":"<p>         Bases: <code>OneDSelector</code></p> <p>Brush interval selector interaction.</p> <p>This 1-D selector interaction enables the user to select an interval using the brushing action of the mouse. A mouse-down marks the start of the interval. The drag after the mouse down in the x-direction selects the extent and a mouse-up signifies the end of the interval.</p> <p>Once an interval is drawn, the selector can be moved to a new interval by dragging the selector to the new interval.</p> <p>A double click at the same point without moving the mouse in the x-direction will result in the entire interval being selected.</p> ATTRIBUTE DESCRIPTION <code>selected</code> <p>Two element array containing the start and end of the interval selected in terms of the scale of the selector. This attribute changes while the selection is being made with the <code>BrushIntervalSelector</code>.</p> <p> TYPE: <code>numpy.ndarray</code> </p> <code>brushing</code> <p>Boolean attribute to indicate if the selector is being dragged. It is True when the selector is being moved and False when it is not. This attribute can be used to trigger computationally intensive code which should be run only on the interval selection being completed as opposed to code which should be run whenever selected is changing.</p> <p> TYPE: <code>bool</code> </p> <code>orientation</code> <p>The orientation of the interval, either vertical or horizontal</p> <p> TYPE: <code>{'horizontal', 'vertical'}</code> </p> <code>color</code> <p>Color of the rectangle representing the brush selector.</p> <p> TYPE: <code>Color or None (default: None)</code> </p>"},{"location":"api/interactions/#bqplot.interacts.BrushSelector","title":"<code>bqplot.interacts.BrushSelector</code>","text":"<p>         Bases: <code>TwoDSelector</code></p> <p>Brush interval selector interaction.</p> <p>This 2-D selector interaction enables the user to select a rectangular region using the brushing action of the mouse. A mouse-down marks the starting point of the interval. The drag after the mouse down selects the rectangle of interest and a mouse-up signifies the end point of the interval.</p> <p>Once an interval is drawn, the selector can be moved to a new interval by dragging the selector to the new interval.</p> <p>A double click at the same point without moving the mouse will result in the entire interval being selected.</p> ATTRIBUTE DESCRIPTION <code>selected_x</code> <p>Two element array containing the start and end of the interval selected in terms of the x_scale of the selector. This attribute changes while the selection is being made with the <code>BrushSelector</code>.</p> <p> TYPE: <code>numpy.ndarray</code> </p> <code>selected_y</code> <p>Two element array containing the start and end of the interval selected in terms of the y_scale of the selector. This attribute changes while the selection is being made with the <code>BrushSelector</code>.</p> <p> TYPE: <code>numpy.ndarray</code> </p> <code>selected</code> <p>A 2x2 array containing the coordinates ::</p> <p>[[selected_x[0], selected_y[0]], [selected_x[1], selected_y[1]]]</p> <p> TYPE: <code>numpy.ndarray</code> </p> <code>brushing</code> <p>boolean attribute to indicate if the selector is being dragged. It is True when the selector is being moved and False when it is not. This attribute can be used to trigger computationally intensive code which should be run only on the interval selection being completed as opposed to code which should be run whenever selected is changing.</p> <p> TYPE: <code>bool (default: False)</code> </p> <code>color</code> <p>Color of the rectangle representing the brush selector.</p> <p> TYPE: <code>Color or None (default: None)</code> </p>"},{"location":"api/interactions/#bqplot.interacts.HandDraw","title":"<code>bqplot.interacts.HandDraw</code>","text":"<p>         Bases: <code>Interaction</code></p> <p>A hand-draw interaction.</p> <p>This can be used to edit the 'y' value of an existing line using the mouse. The minimum and maximum x values of the line which can be edited may be passed as parameters. The y-values for any part of the line can be edited by drawing the desired path while holding the mouse-down. y-values corresponding to x-values smaller than min_x or greater than max_x cannot be edited by HandDraw.</p> ATTRIBUTE DESCRIPTION <code>lines</code> <p>The instance of Lines which is edited using the hand-draw interaction. The 'y' values of the line are changed according to the path of the mouse. If the lines has multi dimensional 'y', then the 'line_index' attribute is used to selected the 'y' to be edited.</p> <p> TYPE: <code>an instance Lines mark or None (default: None)</code> </p> <code>line_index</code> <p>For a line with multi-dimensional 'y', this indicates the index of the 'y' to be edited by the handdraw.</p> <p> TYPE: <code>nonnegative integer (default: 0)</code> </p> <code>min_x</code> <p>The minimum value of 'x' which should be edited via the handdraw.</p> <p> TYPE: <code>float or Date or None (default: None)</code> </p> <code>max_x</code> <p>The maximum value of 'x' which should be edited via the handdraw.</p> <p> TYPE: <code>float or Date or None (default: None)</code> </p>"},{"location":"api/interactions/#bqplot.interacts.IndexSelector","title":"<code>bqplot.interacts.IndexSelector</code>","text":"<p>         Bases: <code>OneDSelector</code></p> <p>Index selector interaction.</p> <p>This 1-D selector interaction uses the mouse x-coordinate to select the corresponding point in terms of the selector scale.</p> <p>Index Selector has two modes:     1. default mode: The mouse controls the x-position of the selector.     2. frozen mode: In this mode, the selector is frozen at a point and             does not respond to mouse events.</p> <pre><code>A single click switches between the two modes.\n</code></pre> ATTRIBUTE DESCRIPTION <code>selected</code> <p>A single element array containing the point corresponding the x-position of the mouse. This attribute is updated as you move the mouse along the x-direction on the figure.</p> <p> TYPE: <code>numpy.ndarray</code> </p> <code>color</code> <p>Color of the line representing the index selector.</p> <p> TYPE: <code>Color or None (default: None)</code> </p> <code>line_width</code> <p>Width of the line representing the index selector.</p> <p> TYPE: <code>nonnegative integer (default: 0)</code> </p>"},{"location":"api/interactions/#bqplot.interacts.FastIntervalSelector","title":"<code>bqplot.interacts.FastIntervalSelector</code>","text":"<p>         Bases: <code>OneDSelector</code></p> <p>Fast interval selector interaction.</p> <p>This 1-D selector is used to select an interval on the x-scale by just moving the mouse (without clicking or dragging). The x-coordinate of the mouse controls the mid point of the interval selected while the y-coordinate of the mouse controls the the width of the interval. The larger the y-coordinate, the wider the interval selected.</p> <p>Interval selector has three modes:     1. default mode: This is the default mode in which the mouse controls             the location and width of the interval.     2. fixed-width mode: In this mode the width of the interval is frozen             and only the location of the interval is controlled with the             mouse.             A single click from the default mode takes you to this mode.             Another single click takes you back to the default mode.     3. frozen mode: In this mode the selected interval is frozen and the             selector does not respond to mouse move.             A double click from the default mode takes you to this mode.             Another double click takes you back to the default mode.</p> ATTRIBUTE DESCRIPTION <code>selected</code> <p>Two-element array containing the start and end of the interval selected in terms of the scale of the selector.</p> <p> TYPE: <code>numpy.ndarray</code> </p> <code>color</code> <p>color of the rectangle representing the interval selector</p> <p> TYPE: <code>Color or None (default: None)</code> </p> <code>size</code> <p>if not None, this is the fixed pixel-width of the interval selector</p> <p> TYPE: <code>Float or None (default: None)</code> </p>"},{"location":"api/interactions/#bqplot.interacts.MultiSelector","title":"<code>bqplot.interacts.MultiSelector</code>","text":"<p>         Bases: <code>BrushIntervalSelector</code></p> <p>Multi selector interaction.</p> <p>This 1-D selector interaction enables the user to select multiple intervals using the mouse. A mouse-down marks the start of the interval. The drag after the mouse down in the x-direction selects the extent and a mouse-up signifies the end of the interval.</p> <p>The current selector is highlighted with a green border and the inactive selectors are highlighted with a red border.</p> <p>The multi selector has three modes:     1. default mode: In this mode the interaction behaves exactly as the             brush selector interaction with the current selector.     2. add mode: In this mode a new selector can be added by clicking at             a point and dragging over the interval of interest. Once a new             selector has been added, the multi selector is back in the             default mode.             From the default mode, ctrl+click switches to the add mode.     3. choose mode: In this mode, any of the existing inactive selectors             can be set as the active selector. When an inactive selector is             selected by clicking, the multi selector goes back to the             default mode.             From the default mode, shift+click switches to the choose mode.</p> <p>A double click at the same point without moving the mouse in the x-direction will result in the entire interval being selected for the current selector.</p> ATTRIBUTE DESCRIPTION <code>selected</code> <p>A dictionary with keys being the names of the intervals and values being the two element arrays containing the start and end of the interval selected by that particular selector in terms of the scale of the selector. This is a read-only attribute. This attribute changes while the selection is being made with the MultiSelectorinteraction.</p> <p> TYPE: <code>dict</code> </p> <code>brushing</code> <p>A boolean attribute to indicate if the selector is being dragged. It is True when the selector is being moved and false when it is not. This attribute can be used to trigger computationally intensive code which should be run only on the interval selection being completed as opposed to code which should be run whenever selected is changing.</p> <p> TYPE: <code>bool (default: False)</code> </p> <code>names</code> <p>A list of strings indicating the keys of the different intervals. Default values are 'int1', 'int2', 'int3' and so on.</p> <p> TYPE: <code>list</code> </p> <code>show_names</code> <p>Attribute to indicate if the names of the intervals are to be displayed along with the interval.</p> <p> TYPE: <code>bool (default: True)</code> </p>"},{"location":"api/interactions/#bqplot.interacts.OneDSelector","title":"<code>bqplot.interacts.OneDSelector</code>","text":"<p>         Bases: <code>Selector</code></p> <p>One-dimensional selector interaction</p> <p>Base class for all selectors which select data in one dimension, i.e., either the x or the y direction. The <code>scale</code> attribute should be provided.</p> ATTRIBUTE DESCRIPTION <code>scale</code> <p>This is the scale which is used for inversion from the pixels to data coordinates. This scale is used for setting the selected attribute for the selector.</p> <p> TYPE: <code>An instance of Scale</code> </p>"},{"location":"api/interactions/#bqplot.interacts.Interaction","title":"<code>bqplot.interacts.Interaction</code>","text":"<p>         Bases: <code>Widget</code></p> <p>The base interaction class.</p> <p>An interaction is a mouse interaction layer for a figure that requires the capture of all mouse events on the plot area. A consequence is that one can allow only one interaction at any time on a figure.</p> <p>An interaction can be associated with features such as selection or manual change of specific mark. Although, they differ from the so called 'mark interactions' in that they do not rely on knowing whether a specific element of the mark are hovered by the mouse.</p> ATTRIBUTE DESCRIPTION <code>types</code> <p>A registry of existing interaction types.</p> <p> TYPE: <code>dict (class-level attribute) representing interaction types</code> </p>"},{"location":"api/interactions/#bqplot.interacts.PanZoom","title":"<code>bqplot.interacts.PanZoom</code>","text":"<p>         Bases: <code>Interaction</code></p> <p>An interaction to pan and zoom wrt scales.</p> ATTRIBUTE DESCRIPTION <code>allow_pan</code> <p>Toggle the ability to pan.</p> <p> TYPE: <code>bool (default: True)</code> </p> <code>allow_zoom</code> <p>Toggle the ability to zoom.</p> <p> TYPE: <code>bool (default: True)</code> </p> <code>scales</code> <p>Dictionary with keys such as 'x' and 'y' and values being the scales in the corresponding direction (dimensions) which should be panned or zoomed.</p> <p> TYPE: <code>Dictionary of lists of Scales (default: {})</code> </p>"},{"location":"api/interactions/#bqplot.interacts.Selector","title":"<code>bqplot.interacts.Selector</code>","text":"<p>         Bases: <code>Interaction</code></p> <p>Selector interaction. A selector can be used to select a subset of data</p> <p>Base class for all the selectors.</p> ATTRIBUTE DESCRIPTION <code>marks</code> <p>list of marks for which the <code>selected</code> attribute is updated based on the data selected by the selector.</p> <p> TYPE: <code>list (default: [])</code> </p>"},{"location":"api/interactions/#bqplot.interacts.TwoDSelector","title":"<code>bqplot.interacts.TwoDSelector</code>","text":"<p>         Bases: <code>Selector</code></p> <p>Two-dimensional selector interaction.</p> <p>Base class for all selectors which select data in both the x and y dimensions. The attributes 'x_scale' and 'y_scale' should be provided.</p> ATTRIBUTE DESCRIPTION <code>x_scale</code> <p>This is the scale which is used for inversion from the pixels to data coordinates in the x-direction. This scale is used for setting the selected attribute for the selector along with <code>y_scale</code>.</p> <p> TYPE: <code>An instance of Scale</code> </p> <code>y_scale</code> <p>This is the scale which is used for inversion from the pixels to data coordinates in the y-direction. This scale is used for setting the selected attribute for the selector along with <code>x_scale</code>.</p> <p> TYPE: <code>An instance of Scale</code> </p>"},{"location":"api/market_map/","title":"MarketMap","text":""},{"location":"api/market_map/#bqplot.market_map.MarketMap","title":"<code>bqplot.market_map.MarketMap</code>","text":"<p>         Bases: <code>DOMWidget</code></p> <p>Waffle wrapped map. A MarketMap is not a Mark, it's a custom Figure!</p> ATTRIBUTE DESCRIPTION <code>names</code> <p>The elements can also be objects convertible to string primary key for the map data. A rectangle is created for each unique entry in this array</p> <p> TYPE: <code>numpy.ndarray of strings (default: [])</code> </p> <code>groups</code> <p>attribute on which the groupby is run. If this is an empty array, then there is no group by for the map.</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>display_text</code> <p>data to be displayed on each rectangle of the map.If this is empty it defaults to the names attribute.</p> <p> TYPE: <code>numpy.ndarray or None(default: None)</code> </p> <code>ref_data</code> <p>Additional data associated with each element of the map. The data in this data frame can be displayed as a tooltip.</p> <p> TYPE: <code>pandas.DataDrame or None (default: None)</code> </p> <code>color</code> <p>Data to represent the color for each of the cells. If the value of the data is NaN for a cell, then the color of the cell is the color of the group it belongs to in absence of data for color</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>scales</code> <p>If the map has data being passed as color, then a corresponding color scale is required</p> <p> TYPE: <code>Dictionary of scales holding a scale for each data attribute</code> </p> <code>axes</code> <p>Ability to add an axis for the scales which are used to scale data represented in the map</p> <p> TYPE: <code>List of axes</code> </p> <code>on_hover</code> <p>This event is received when the mouse is hovering over a cell. Returns the data of the cell and the ref_data associated with the cell.</p> <p> TYPE: <code>custom event</code> </p> <code>tooltip_widget</code> <p>Widget to be displayed as the tooltip. This can be combined with the on_hover event to display the chart corresponding to the cell being hovered on.</p> <p> TYPE: <code>Instance of a widget</code> </p> <code>tooltip_fields</code> <p>names of the fields from the ref_data dataframe which should be displayed in the tooltip.</p> <p> TYPE: <code>list</code> </p> <code>tooltip_formats</code> <p>formats for each of the fields for the tooltip data. Order should match the order of the tooltip_fields</p> <p> TYPE: <code>list</code> </p> <code>freeze_tooltip_location</code> <p>if True, freezes the location of the tooltip. If False, tooltip will follow the mouse</p> <p> TYPE: <code>bool (default: False)</code> </p> <code>show_groups</code> <p>attribute to determine if the groups should be displayed. If set to True, the finer elements are blurred</p> <p> TYPE: <code>bool</code> </p>"},{"location":"api/market_map/#bqplot.market_map.MarketMap--map-drawing-attributes","title":"Map Drawing Attributes","text":"ATTRIBUTE DESCRIPTION <code>cols</code> <p>Suggestion for no of columns in the map.If not specified, value is inferred from the no of rows and no of cells</p> <p> TYPE: <code>int</code> </p> <code>rows</code> <p>No of rows in the map.If not specified, value is inferred from the no of cells and no of columns. If both rows and columns are not specified, then a square is constructed basing on the no of cells. The above two attributes are suggestions which are respected unless they are not feasible. One required condition is that, the number of columns is odd when row_groups is greater than 1.</p> <p> TYPE: <code>int</code> </p> <code>row_groups</code> <p>No of groups the rows should be divided into. This can be used to draw more square cells for each of the groups</p> <p> TYPE: <code>int</code> </p>"},{"location":"api/market_map/#bqplot.market_map.MarketMap--layout-attributes","title":"Layout Attributes","text":"ATTRIBUTE DESCRIPTION <code>map_margin</code> <p>Dictionary containing the top, bottom, left and right margins. The user is responsible for making sure that the width and height are greater than the sum of the margins.</p> <p> TYPE: <code>dict (default: {top=50, bottom=50, left=50, right=50})</code> </p> <code>min_aspect_ratio</code> <p>minimum width / height ratio of the figure</p> <p> TYPE: <code>float</code> </p> <code>max_aspect_ratio</code> <p>maximum width / height ratio of the figure</p> <p> TYPE: <code>float</code> </p>"},{"location":"api/market_map/#bqplot.market_map.MarketMap--display-attributes","title":"Display Attributes","text":"ATTRIBUTE DESCRIPTION <code>colors</code> <p>Colors for each of the groups which are cycled over to cover all the groups</p> <p> TYPE: <code>list of colors</code> </p> <code>title</code> <p>Title of the Market Map</p> <p> TYPE: <code>string</code> </p> <code>title_style</code> <p>CSS style for the title of the Market Map</p> <p> TYPE: <code>dict</code> </p> <code>stroke</code> <p>Stroke of each of the cells of the market map</p> <p> TYPE: <code>color</code> </p> <code>group_stroke</code> <p>Stroke of the border for the group of cells corresponding to a group</p> <p> TYPE: <code>color</code> </p> <code>selected_stroke</code> <p>stroke for the selected cells</p> <p> TYPE: <code>color</code> </p> <code>hovered_stroke</code> <p>stroke for the cell being hovered on</p> <p> TYPE: <code>color</code> </p> <code>font_style</code> <p>CSS style for the text of each cell</p> <p> TYPE: <code>dict</code> </p>"},{"location":"api/market_map/#bqplot.market_map.MarketMap--other-attributes","title":"Other Attributes","text":"ATTRIBUTE DESCRIPTION <code>enable_select</code> <p>boolean to control the ability to select the cells of the map by clicking</p> <p> TYPE: <code>bool</code> </p> <code>enable_hover</code> <p>boolean to control if the map should be aware of which cell is being hovered on. If it is set to False, tooltip will not be displayed</p> <p> TYPE: <code>bool</code> </p> <p>Note</p> <p>The aspect ratios stand for width / height ratios.</p> <ul> <li>If the available space is within bounds in terms of min and max aspect ratio, we use the entire available space.</li> <li>If the available space is too oblong horizontally, we use the client height and the width that corresponds max_aspect_ratio (maximize width under the constraints).</li> <li>If the available space is too oblong vertically, we use the client width and the height that corresponds to min_aspect_ratio (maximize height under the constraint). This corresponds to maximizing the area under the constraints.</li> </ul> <p>Default min and max aspect ratio are both equal to 16 / 9.</p>"},{"location":"api/marks/","title":"Marks","text":""},{"location":"api/marks/#bqplot.Mark","title":"<code>bqplot.Mark</code>","text":"<p>         Bases: <code>Widget</code></p> <p>The base mark class.</p> <p>Traitlet mark attributes may be decorated with metadata.</p> <p>Data Attribute Decoration</p> <p>Data attributes are decorated with the following values:</p> <ul> <li>scaled: bool     Indicates whether the considered attribute is a data attribute which     must be associated with a scale in order to be taken into account.</li> <li>rtype: string     Range type of the associated scale.</li> <li>atype: string     Key in bqplot's axis registry of the recommended axis type to represent     this scale. When not specified, the default is 'bqplot.Axis'.</li> </ul>"},{"location":"api/marks/#bqplot.Mark--style-attributes","title":"Style Attributes","text":"ATTRIBUTE DESCRIPTION <code>display_name</code> <p>Holds a user-friendly name for the trait attribute.</p> <p> TYPE: <code>string</code> </p> <code>mark_types</code> <p>A registry of existing mark types.</p> <p> TYPE: <code>dict (class-level attribute)</code> </p> <code>scales</code> <p>A dictionary of scales holding scales for each data attribute. - If a mark holds a scaled attribute named 'x', the scales dictionary must have a corresponding scale for the key 'x'. - The scale's range type should be equal to the scaled attribute's range type (rtype).</p> <p> TYPE: <code>Dict of scales (default: {})</code> </p> <code>scales_metadata</code> <p>A dictionary of dictionaries holding metadata on the way scales are used by the mark. For example, a linear scale may be used to count pixels horizontally or vertically. The content of this dictionary may change dynamically. It is an instance-level attribute.</p> <p> TYPE: <code>Dict (default: {})</code> </p> <code>preserve_domain</code> <p>Indicates if this mark affects the domain(s) of the specified scale(s). The keys of this dictionary are the same as the ones of the \"scales\" attribute, and values are boolean. If a key is missing, it is considered as False.</p> <p> TYPE: <code>dict (default: {})</code> </p> <code>display_legend</code> <p>Display toggle for the mark legend in the general figure legend</p> <p> TYPE: <code>bool (default: False)</code> </p> <code>labels</code> <p>Labels of the items of the mark. This attribute has different meanings depending on the type of mark.</p> <p> TYPE: <code>list of unicode strings (default: [])</code> </p> <code>apply_clip</code> <p>Indicates whether the items that are beyond the limits of the chart should be clipped.</p> <p> TYPE: <code>bool (default: True)</code> </p> <code>visible</code> <p>Visibility toggle for the mark.</p> <p> TYPE: <code>bool (default: True)</code> </p> <code>selected_style</code> <p>CSS style to be applied to selected items in the mark.</p> <p> TYPE: <code>dict (default: {})</code> </p> <code>unselected_style</code> <p>CSS style to be applied to items that are not selected in the mark, when a selection exists.</p> <p> TYPE: <code>dict (default: {})</code> </p> <code>selected</code> <p>Indices of the selected items in the mark.</p> <p> TYPE: <code>list of integers or None (default: None)</code> </p> <code>tooltip</code> <p>Widget to be displayed as tooltip when elements of the scatter are hovered on</p> <p> TYPE: <code>DOMWidget or None (default: None)</code> </p> <code>tooltip_style</code> <p>Styles to be applied to the tooltip widget</p> <p> TYPE: <code>Dictionary (default: {'opacity': 0.9})</code> </p> <code>enable_hover</code> <p>Boolean attribute to control the hover interaction for the scatter. If this is false, the on_hover custom mssg is not sent back to the python side</p> <p> TYPE: <code>Bool (default: True)</code> </p> <code>interactions</code> <p>Dictionary listing the different interactions for each mark. The key is the event which triggers the interaction and the value is the kind of interactions. Keys and values can only take strings from separate enums for each mark.</p> <p> TYPE: <code>Dictionary (default: {'hover': 'tooltip'})</code> </p> <code>tooltip_location</code> <p>Enum specifying the location of the tooltip. 'mouse' places the tooltip at the location of the mouse when the tooltip is activated and 'center' places the tooltip at the center of the figure. If tooltip is linked to a click event, 'mouse' places the tooltip at the location of the click that triggered the tooltip to be visible.</p> <p> TYPE: <code>{'mouse', 'center'} (default: 'mouse')</code> </p>"},{"location":"api/marks/#bqplot.Mark--methods","title":"Methods","text":"ATTRIBUTE DESCRIPTION <code>on_hover(callback, remove=False)</code> <p>Register a callback that will be triggered on hover.</p> <p> </p> <code>on_click(callback, remove=False)</code> <p>Register a callback that will be triggered on click.</p> <p> </p> <code>on_legend_hover(callback, remove=False)</code> <p>Register a callback that will be triggered on legend hover.</p> <p> </p> <code>on_legend_click(callback, remove=False)</code> <p>Register a callback that will be triggered on legend click.</p> <p> </p> <code>on_element_click(callback, remove=False)</code> <p>Register a callback that will be triggered on element click.</p> <p> </p> <code>on_background_click(callback, remove=False)</code> <p>Register a callback that will be triggered on background click.</p> <p> </p>"},{"location":"api/marks/#bqplot.Lines","title":"<code>bqplot.Lines</code>","text":"<p>         Bases: <code>Mark</code></p> <p>Lines mark.</p> <p>Warning</p> <p>In the case of the Lines mark, scales for 'x' and 'y' must be provided.</p>"},{"location":"api/marks/#bqplot.Lines--data-attributes","title":"Data Attributes","text":"ATTRIBUTE DESCRIPTION <code>x</code> <p>abscissas of the data points (1d or 2d array)</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>y</code> <p>ordinates of the data points (1d or 2d array)</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>color</code> <p>colors of the different lines based on data. If it is [], then the colors from the colors attribute are used. Each line has a single color and if the size of colors is less than the number of lines, the remaining lines are given the default colors.</p> <p> TYPE: <code>numpy.ndarray (default: None)</code> </p>"},{"location":"api/marks/#bqplot.Lines--style-attributes","title":"Style Attributes","text":"ATTRIBUTE DESCRIPTION <code>icon</code> <p>Font-awesome icon for the respective mark</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>name</code> <p>User-friendly name of the mark</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>colors</code> <p>List of colors of the Lines. If the list is shorter than the number of lines, the colors are reused.</p> <p> TYPE: <code>list of colors (default: CATEGORY10)</code> </p> <code>close_path</code> <p>Whether to close the paths or not.</p> <p> TYPE: <code>bool (default: False)</code> </p> <code>fill</code> <p>Fill in the area defined by the curves</p> <p> TYPE: <code>{'none', 'bottom', 'top', 'inside', 'between'}</code> </p> <code>fill_colors</code> <p>Fill colors for the areas. Defaults to stroke-colors when no color provided</p> <p> TYPE: <code>list of colors (default: [])</code> </p> <code>opacities</code> <p>Opacity for the  lines and patches. Defaults to 1 when the list is too short, or the element of the list is set to None.</p> <p> TYPE: <code>list of floats (default: [])</code> </p> <code>fill_opacities</code> <p>Opacity for the areas. Defaults to 1 when the list is too short, or the element of the list is set to None.</p> <p> TYPE: <code>list of floats (default: [])</code> </p> <code>stroke_width</code> <p>Stroke width of the Lines</p> <p> TYPE: <code>float (default: 2)</code> </p> <code>labels_visibility</code> <p>Visibility of the curve labels</p> <p> TYPE: <code>{'none', 'label'}</code> </p> <code>curves_subset</code> <p>If set to None, all the lines are displayed. Otherwise, only the items in the list will have full opacity, while others will be faded.</p> <p> TYPE: <code>list of integers or None (default: [])</code> </p> <code>line_style</code> <p>Line style.</p> <p> TYPE: <code>{'solid', 'dashed', 'dotted', 'dash_dotted'}</code> </p> <code>interpolation</code> <p> TYPE: <code>{'linear', 'basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open',</code> </p> <code>'cardinal-closed', 'monotone', 'step-before', 'step-after'}</code> <p>Interpolation scheme used for interpolation between the data points provided. Please refer to the svg interpolate documentation for details about the different interpolation schemes.</p> <p> </p> <code>marker</code> <p>Marker shape</p> <p> TYPE: <code>{'circle', 'cross', 'diamond', 'square', 'triangle-down', 'triangle-up', 'arrow', 'rectangle', 'ellipse', 'plus', 'crosshair', 'point'}</code> </p> <code>marker_size</code> <p>Default marker size in pixels</p> <p> TYPE: <code>nonnegative int (default: 64)</code> </p> <p>Note</p> <ul> <li>The fields which can be passed to the default tooltip are:<ul> <li>name: label of the line</li> <li>index: index of the line being hovered on</li> <li>color: data attribute for the color of the line</li> </ul> </li> <li>The following are the events which can trigger interactions:<ul> <li>click: left click of the mouse</li> <li>hover: mouse-over an element</li> </ul> </li> <li>The following are the interactions which can be linked to the above events:<ul> <li>tooltip: display tooltip</li> </ul> </li> </ul>"},{"location":"api/marks/#bqplot.FlexLine","title":"<code>bqplot.FlexLine</code>","text":"<p>         Bases: <code>Mark</code></p> <p>Lines mark with the possibility to change the line width and color for each segment.</p> <p>Warning</p> <p>In the case of the FlexLines mark, scales for 'x' and 'y' must be provided. Scales for the color and width data attributes are optional. In the case where another data attribute than 'x' or 'y' is provided but the corresponding scale is missing, the data attribute is ignored.</p>"},{"location":"api/marks/#bqplot.FlexLine--data-attributes","title":"Data Attributes","text":"ATTRIBUTE DESCRIPTION <code>x</code> <p>abscissas of the data points (1d array)</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>y</code> <p>ordinates of the data points (1d array)</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>color</code> <p>Array controlling the color of the data points</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p> <code>width</code> <p>Array controlling the widths of the Lines.</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p>"},{"location":"api/marks/#bqplot.FlexLine--style-attributes","title":"Style Attributes","text":"ATTRIBUTE DESCRIPTION <code>name</code> <p>user-friendly name of the mark</p> <p> TYPE: <code>string (class-level attributes)</code> </p> <code>colors</code> <p>List of colors for the Lines</p> <p> TYPE: <code>list of colors (default: CATEGORY10)</code> </p> <code>stroke_width</code> <p>Default stroke width of the Lines</p> <p> TYPE: <code>float (default: 1.5)</code> </p>"},{"location":"api/marks/#bqplot.Scatter","title":"<code>bqplot.Scatter</code>","text":"<p>         Bases: <code>_ScatterBase</code></p> <p>Scatter mark.</p> <p>Warning</p> <p>In the case of the Scatter mark, scales for 'x' and 'y' must be provided. The scales of other data attributes are optional. In the case where another data attribute than 'x' or 'y' is provided but the corresponding scale is missing, the data attribute is ignored.</p>"},{"location":"api/marks/#bqplot.Scatter--data-attributes","title":"Data Attributes","text":"ATTRIBUTE DESCRIPTION <code>x</code> <p>abscissas of the data points (1d array)</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>y</code> <p>ordinates of the data points (1d array)</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>color</code> <p>color of the data points (1d array). Defaults to default_color when not provided or when a value is NaN</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p> <code>opacity</code> <p>opacity of the data points (1d array). Defaults to default_opacity when not provided or when a value is NaN</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p> <code>size</code> <p>size of the data points. Defaults to default_size when not provided or when a value is NaN</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p> <code>skew</code> <p>skewness of the markers representing the data points. Defaults to default_skew when not provided or when a value is NaN</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p> <code>rotation</code> <p>orientation of the markers representing the data points. The rotation scale's range is [0, 180] Defaults to 0 when not provided or when a value is NaN.</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p>"},{"location":"api/marks/#bqplot.Scatter--style-attributes","title":"Style Attributes","text":"ATTRIBUTE DESCRIPTION <code>icon</code> <p>Font-awesome icon for that mark</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>name</code> <p>User-friendly name of the mark</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>marker</code> <p>Marker shape</p> <p> TYPE: <code>{'circle', 'cross', 'diamond', 'square', 'triangle-down', 'triangle-up', 'arrow', 'rectangle', 'ellipse', 'plus', 'crosshair', 'point'}</code> </p> <code>colors</code> <p>List of colors of the markers. If the list is shorter than the number of points, the colors are reused.</p> <p> TYPE: <code>list of colors (default: ['steelblue'])</code> </p> <code>default_colors</code> <p>Same as <code>colors</code>, deprecated as of version 0.8.4</p> <p> TYPE: <code>Deprecated</code> </p> <code>fill</code> <p>Whether to fill the markers or not</p> <p> TYPE: <code>Bool (default: True)</code> </p> <code>stroke</code> <p>Stroke color of the marker</p> <p> TYPE: <code>Color or None (default: None)</code> </p> <code>stroke_width</code> <p>Stroke width of the marker</p> <p> TYPE: <code>Float (default: 1.5)</code> </p> <code>opacities</code> <p>Default opacities of the markers. If the list is shorter than the number of points, the opacities are reused.</p> <p> TYPE: <code>list of floats (default: [1.0])</code> </p> <code>default_skew</code> <p>Default skew of the marker. This number is validated to be between 0 and 1.</p> <p> TYPE: <code>float (default: 0.5)</code> </p> <code>default_size</code> <p>Default marker size in pixel. If size data is provided with a scale, default_size stands for the maximal marker size (i.e. the maximum value for the 'size' scale range)</p> <p> TYPE: <code>nonnegative int (default: 64)</code> </p> <code>drag_size</code> <p>Ratio of the size of the dragged scatter size to the default scatter size.</p> <p> TYPE: <code>nonnegative float (default: 5.)</code> </p> <code>names</code> <p>Labels for the points of the chart</p> <p> TYPE: <code>numpy.ndarray (default: None)</code> </p> <code>display_names</code> <p>Controls whether names are displayed for points in the scatter</p> <p> TYPE: <code>bool (default: True)</code> </p> <code>label_display_horizontal_offset</code> <p>Adds an offset, in pixels, to the horizontal positioning of the 'names' label above each data point</p> <p> TYPE: <code>float (default: None)</code> </p> <code>label_display_vertical_offset</code> <p>Adds an offset, in pixels, to the vertical positioning of the 'names' label above each data point</p> <p> TYPE: <code>float (default: None)</code> </p> <code>enable_move</code> <p>Controls whether points can be moved by dragging. Refer to restrict_x, restrict_y for more options.</p> <p> TYPE: <code>bool (default: False)</code> </p> <code>restrict_x</code> <p>Restricts movement of the point to only along the x axis. This is valid only when enable_move is set to True. If both restrict_x and restrict_y are set to True, the point cannot be moved.</p> <p> TYPE: <code>bool (default: False)</code> </p> <code>restrict_y</code> <p>Restricts movement of the point to only along the y axis. This is valid only when enable_move is set to True. If both restrict_x and restrict_y are set to True, the point cannot be moved.</p> <p> TYPE: <code>bool (default: False)</code> </p> <p>Note</p> <ul> <li>The fields which can be passed to the default tooltip are:<ul> <li>All the data attributes (x, y, color, opacity, size, skew, rotation)</li> <li>index: index of the marker being hovered on</li> </ul> </li> <li>The following are the events which can trigger interactions:<ul> <li>click: left click of the mouse</li> <li>hover: mouse-over an element</li> </ul> </li> <li>The following are the interactions which can be linked to the above events:<ul> <li>tooltip: display tooltip</li> <li>add: add new points to the scatter (can only linked to click)</li> </ul> </li> </ul>"},{"location":"api/marks/#bqplot.Hist","title":"<code>bqplot.Hist</code>","text":"<p>         Bases: <code>Mark</code></p> <p>Histogram mark.</p> <p>Warning</p> <p>In the case of the Hist mark, scales for 'sample' and 'count' must be provided.</p>"},{"location":"api/marks/#bqplot.Hist--data-attributes","title":"Data Attributes","text":"ATTRIBUTE DESCRIPTION <code>sample</code> <p>sample of which the histogram must be computed.</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>count</code> <p>number of sample points per bin. It is a read-only attribute.</p> <p> TYPE: <code>numpy.ndarray (read-only)</code> </p>"},{"location":"api/marks/#bqplot.Hist--style-attributes","title":"Style Attributes","text":"ATTRIBUTE DESCRIPTION <code>icon</code> <p>font-awesome icon for that mark</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>name</code> <p>user-friendly name of the mark</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>bins</code> <p>number of bins in the histogram</p> <p> TYPE: <code>nonnegative int (default: 10)</code> </p> <code>normalized</code> <p>Boolean attribute to return normalized values which sum to 1 or direct counts for the <code>count</code> attribute. The scale of <code>count</code> attribute is determined by the value of this flag.</p> <p> TYPE: <code>bool (default: False)</code> </p> <code>colors</code> <p>List of colors of the Histogram. If the list is shorter than the number of bins, the colors are reused.</p> <p> TYPE: <code>list of colors (default: ['steelblue'])</code> </p> <code>stroke</code> <p>Stroke color of the histogram</p> <p> TYPE: <code>Color or None (default: None)</code> </p> <code>opacities</code> <p>Opacity for the bins of the histogram. Defaults to 1 when the list is too short, or the element of the list is set to None.</p> <p> TYPE: <code>list of floats (default: [])</code> </p> <code>midpoints</code> <p>midpoints of the bins of the histogram. It is a read-only attribute.</p> <p> TYPE: <code>list (default: [])</code> </p> <p>Note</p> <ul> <li>The fields which can be passed to the default tooltip are:<ul> <li>midpoint: mid-point of the bin related to the rectangle hovered on</li> <li>count: number of elements in the bin hovered on</li> <li>bin_start: start point of the bin</li> <li>bin_end: end point of the bin</li> <li>index: index of the bin</li> </ul> </li> </ul>"},{"location":"api/marks/#bqplot.Bars","title":"<code>bqplot.Bars</code>","text":"<p>         Bases: <code>Mark</code></p> <p>Bar mark.</p> <p>Warning</p> <p>In the case of the Bars mark, scales for 'x' and 'y'  must be provided. The scales of other data attributes are optional. In the case where another data attribute than 'x' or 'y' is provided but the corresponding scale is missing, the data attribute is ignored.</p>"},{"location":"api/marks/#bqplot.Bars--data-attributes","title":"Data Attributes","text":"ATTRIBUTE DESCRIPTION <code>x</code> <p>abscissas of the data points (1d array)</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>y</code> <p>ordinates of the values for the data points</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>color</code> <p>color of the data points (1d array). Defaults to default_color when not provided or when a value is NaN</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p>"},{"location":"api/marks/#bqplot.Bars--style-attributes","title":"Style Attributes","text":"ATTRIBUTE DESCRIPTION <code>icon</code> <p>font-awesome icon for that mark</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>name</code> <p>user-friendly name of the mark</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>color_mode</code> <p>Specify how default colors are applied to bars. The 'group' mode means colors are assigned per group. If the list of colors is shorter than the number of groups, colors are reused. The 'element' mode means colors are assigned per group element. If the list of colors is shorter than the number of bars in a group, colors are reused. The 'no_group' mode means colors are assigned per bar, discarding the fact that there are groups or stacks. If the list of colors is shorter than the total number of bars, colors are reused.</p> <p> TYPE: <code>{'auto', 'group', 'element', 'no_group'}</code> </p> <code>opacity_mode</code> <p>Same as the <code>color_mode</code> attribute, but for the opacity.</p> <p> TYPE: <code>{'auto', 'group', 'element', 'no_group'}</code> </p> <code>type</code> <p>whether 2-dimensional bar charts should appear grouped or stacked.</p> <p> TYPE: <code>{'stacked', 'grouped'}</code> </p> <code>colors</code> <p>list of colors for the bars.</p> <p> TYPE: <code>list of colors (default: ['steelblue'])</code> </p> <code>orientation</code> <p>Specifies whether the bar chart is drawn horizontally or vertically. If a horizontal bar chart is drawn, the x data is drawn vertically.</p> <p> TYPE: <code>{'horizontal', 'vertical'}</code> </p> <code>padding</code> <p>Attribute to control the spacing between the bars value is specified as a percentage of the width of the bar</p> <p> TYPE: <code>float (default: 0.05)</code> </p> <code>fill</code> <p>Whether to fill the bars or not</p> <p> TYPE: <code>Bool (default: True)</code> </p> <code>stroke</code> <p>Stroke color for the bars</p> <p> TYPE: <code>Color or None (default: None)</code> </p> <code>stroke_width</code> <p>Stroke width of the bars</p> <p> TYPE: <code>Float (default: 0.)</code> </p> <code>opacities</code> <p>Opacities for the bars. Defaults to 1 when the list is too short, or the element of the list is set to None.</p> <p> TYPE: <code>list of floats (default: [])</code> </p> <code>base</code> <p>reference value from which the bars are drawn. defaults to 0.0</p> <p> TYPE: <code>float (default: 0.0)</code> </p> <code>align</code> <p>alignment of bars with respect to the tick value</p> <p> TYPE: <code>{'center', 'left', 'right'}</code> </p> <code>label_display</code> <p>whether or not to display bar data labels</p> <p> TYPE: <code>bool (default: False)</code> </p> <code>label_display_format</code> <p>format for displaying values.</p> <p> TYPE: <code>string (default: .2f)</code> </p> <code>label_font_style</code> <p>CSS style for the text of each cell</p> <p> TYPE: <code>dict</code> </p> <code>label_display_vertical_offset</code> <p>vertical offset value for the label display</p> <p> TYPE: <code>float</code> </p> <code>label_display_horizontal_offset</code> <p>horizontal offset value for the label display</p> <p> TYPE: <code>float</code> </p> <p>Note</p> <ul> <li>The fields which can be passed to the default tooltip are:<ul> <li>All the data attributes</li> <li>index: index of the bar being hovered on</li> <li>sub_index: if data is two dimensional, this is the minor index</li> </ul> </li> </ul>"},{"location":"api/marks/#bqplot.Graph","title":"<code>bqplot.Graph</code>","text":"<p>         Bases: <code>Mark</code></p> <p>Graph with nodes and links.</p>"},{"location":"api/marks/#bqplot.Graph--data-attributes","title":"Data Attributes","text":"ATTRIBUTE DESCRIPTION <code>x</code> <p>abscissas of the node data points (1d array)</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>y</code> <p>ordinates of the node data points (1d array)</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>color</code> <p>color of the node data points (1d array).</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p> <code>link_color</code> <p>link data passed as 2d matrix</p> <p> TYPE: <code>numpy.ndarray of shape(len(nodes), len(nodes))</code> </p>"},{"location":"api/marks/#bqplot.Graph--style-attributes","title":"Style Attributes","text":"ATTRIBUTE DESCRIPTION <code>node_data</code> <p>list of node attributes for the graph</p> <p> TYPE: <code>List</code> </p> <code>link_matrix</code> <p>link data passed as 2d matrix</p> <p> TYPE: <code>numpy.ndarray of shape(len(nodes), len(nodes))</code> </p> <code>link_data</code> <p>list of link attributes for the graph</p> <p> TYPE: <code>List</code> </p> <code>charge</code> <p>charge of force layout. Will be ignored when x and y data attributes are set</p> <p> TYPE: <code>int (default: -600)</code> </p> <code>static</code> <p>whether the graph is static or not</p> <p> TYPE: <code>bool (default: False)</code> </p> <code>link_distance</code> <p>link distance in pixels between nodes. Will be ignored when x and y data attributes are set</p> <p> TYPE: <code>float (default: 100)</code> </p> <code>link_type</code> <p>Enum representing link type</p> <p> TYPE: <code>{'arc', 'line', 'slant_line'} (default: 'arc')</code> </p> <code>directed</code> <p>directed or undirected graph</p> <p> TYPE: <code>bool (default: True)</code> </p> <code>highlight_links</code> <p>highlights incoming and outgoing links when hovered on a node</p> <p> TYPE: <code>bool (default: True)</code> </p> <code>colors</code> <p>list of node colors</p> <p> TYPE: <code>list (default: CATEGORY10)</code> </p>"},{"location":"api/marks/#bqplot.GridHeatMap","title":"<code>bqplot.GridHeatMap</code>","text":"<p>         Bases: <code>Mark</code></p> <p>GridHeatMap mark.</p> <p>Alignment: The tiles can be aligned so that the data matches either the start, the end or the midpoints of the tiles. This is controlled by the align attribute.</p> <p>Suppose the data passed is a m-by-n matrix. If the scale for the rows is Ordinal, then alignment is by default the mid points. For a non-ordinal scale, the data cannot be aligned to the mid points of the rectangles.</p> <p>If it is not ordinal, then two cases arise. If the number of rows passed is m, then align attribute can be used. If the number of rows passed is m+1, then the data are the boundaries of the m rectangles.</p> <p>If rows and columns are not passed, and scales for them are also not passed, then ordinal scales are generated for the rows and columns.</p>"},{"location":"api/marks/#bqplot.GridHeatMap--data-attributes","title":"Data Attributes","text":"ATTRIBUTE DESCRIPTION <code>color</code> <p>color of the data points (2d array). The number of elements in this array correspond to the number of cells created in the heatmap.</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p> <code>row</code> <p>labels for the rows of the <code>color</code> array passed. The length of this can be no more than 1 away from the number of rows in <code>color</code>. This is a scaled attribute and can be used to affect the height of the cells as the entries of <code>row</code> can indicate the start or the end points of the cells. Refer to the property <code>row_align</code>. If this property is None, then a uniformly spaced grid is generated in the row direction.</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p> <code>column</code> <p>labels for the columns of the <code>color</code> array passed. The length of this can be no more than 1 away from the number of columns in <code>color</code> This is a scaled attribute and can be used to affect the width of the cells as the entries of <code>column</code> can indicate the start or the end points of the cells. Refer to the property <code>column_align</code>. If this property is None, then a uniformly spaced grid is generated in the column direction.</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p>"},{"location":"api/marks/#bqplot.GridHeatMap--style-attributes","title":"Style Attributes","text":"ATTRIBUTE DESCRIPTION <code>row_align</code> <p>This is only valid if the number of entries in <code>row</code> exactly match the number of rows in <code>color</code> and the <code>row_scale</code> is not <code>OrdinalScale</code>. <code>start</code> aligns the row values passed to be aligned with the start of the tiles and <code>end</code> aligns the row values to the end of the tiles.</p> <p> TYPE: <code>Enum([start, end])</code> </p> <code>column_align</code> <p>This is only valid if the number of entries in <code>column</code> exactly match the number of columns in <code>color</code> and the <code>column_scale</code> is not <code>OrdinalScale</code>. <code>start</code> aligns the column values passed to be aligned with the start of the tiles and <code>end</code> aligns the column values to the end of the tiles.</p> <p> TYPE: <code>Enum(['start', end'])</code> </p> <code>anchor_style</code> <p>Controls the style for the element which serves as the anchor during selection.</p> <p> TYPE: <code>dict (default: {})</code> </p> <code>display_format</code> <p>format for displaying values. If None, then values are not displayed</p> <p> TYPE: <code>string (default: None)</code> </p> <code>font_style</code> <p>CSS style for the text of each cell</p> <p> TYPE: <code>dict</code> </p>"},{"location":"api/marks/#bqplot.HeatMap","title":"<code>bqplot.HeatMap</code>","text":"<p>         Bases: <code>Mark</code></p> <p>HeatMap mark.</p>"},{"location":"api/marks/#bqplot.HeatMap--data-attributes","title":"Data Attributes","text":"ATTRIBUTE DESCRIPTION <code>color</code> <p>color of the data points (2d array).</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p> <code>x</code> <p>labels for the columns of the <code>color</code> array passed. The length of this has to be the number of columns in <code>color</code>. This is a scaled attribute.</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p> <code>y</code> <p>labels for the rows of the <code>color</code> array passed. The length of this has to be the number of rows in <code>color</code>. This is a scaled attribute.</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p>"},{"location":"api/marks/#bqplot.Label","title":"<code>bqplot.Label</code>","text":"<p>         Bases: <code>_ScatterBase</code></p> <p>Label mark.</p>"},{"location":"api/marks/#bqplot.Label--data-attributes","title":"Data Attributes","text":"ATTRIBUTE DESCRIPTION <code>x</code> <p>horizontal position of the labels, in data coordinates or in figure coordinates</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>y</code> <p>vertical position of the labels, in data coordinates or in figure coordinates</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>color</code> <p>label colors</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p> <code>size</code> <p>label sizes</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p> <code>rotation</code> <p>label rotations</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p> <code>opacity</code> <p>label opacities</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p>"},{"location":"api/marks/#bqplot.Label--style-attributes","title":"Style Attributes","text":"ATTRIBUTE DESCRIPTION <code>x_offset</code> <p>horizontal offset in pixels from the stated x location</p> <p> TYPE: <code>int (default: 0)</code> </p> <code>y_offset</code> <p>vertical offset in pixels from the stated y location</p> <p> TYPE: <code>int (default: 0)</code> </p> <code>text</code> <p>text to be displayed</p> <p> TYPE: <code>string (default: '')</code> </p> <code>default_size</code> <p>font size in px, em or ex</p> <p> TYPE: <code>string (default: '14px')</code> </p> <code>font_weight</code> <p>font weight of the caption</p> <p> TYPE: <code>{'bold', 'normal', 'bolder'}</code> </p> <code>drag_size</code> <p>Ratio of the size of the dragged label font size to the default label font size.</p> <p> TYPE: <code>nonnegative float (default: 1.)</code> </p> <code>align</code> <p>alignment of the text with respect to the provided location enable_move: Bool (default: False) Enable the label to be moved by dragging. Refer to restrict_x, restrict_y for more options.</p> <p> TYPE: <code>{'start', 'middle', 'end'}</code> </p> <code>restrict_x</code> <p>Restricts movement of the label to only along the x axis. This is valid only when enable_move is set to True. If both restrict_x and restrict_y are set to True, the label cannot be moved.</p> <p> TYPE: <code>bool (default: False)</code> </p> <code>restrict_y</code> <p>Restricts movement of the label to only along the y axis. This is valid only when enable_move is set to True. If both restrict_x and restrict_y are set to True, the label cannot be moved.</p> <p> TYPE: <code>bool (default: False)</code> </p>"},{"location":"api/marks/#bqplot.OHLC","title":"<code>bqplot.OHLC</code>","text":"<p>         Bases: <code>Mark</code></p> <p>Open/High/Low/Close marks.</p>"},{"location":"api/marks/#bqplot.OHLC--data-attributes","title":"Data Attributes","text":"ATTRIBUTE DESCRIPTION <code>x</code> <p>abscissas of the data points (1d array)</p> <p> TYPE: <code>numpy.ndarray</code> </p> <code>y</code> <p>Open/High/Low/Close ordinates of the data points (2d array)</p> <p> TYPE: <code>numpy.ndarrays</code> </p>"},{"location":"api/marks/#bqplot.OHLC--style-attributes","title":"Style Attributes","text":"ATTRIBUTE DESCRIPTION <code>icon</code> <p>font-awesome icon for that mark</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>name</code> <p>user-friendly name of the mark</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>marker</code> <p>marker type</p> <p> TYPE: <code>{'candle', 'bar'}</code> </p> <code>stroke</code> <p>stroke color of the marker</p> <p> TYPE: <code>color (default: None)</code> </p> <code>stroke_width</code> <p>stroke width of the marker</p> <p> TYPE: <code>float (default: 1.0)</code> </p> <code>colors</code> <p>fill colors for the markers (up/down)</p> <p> TYPE: <code>List of colors (default: ['limegreen', 'red'])</code> </p> <code>opacities</code> <p>Opacities for the markers of the OHLC mark. Defaults to 1 when the list is too short, or the element of the list is set to None.</p> <p> TYPE: <code>list of floats (default: [])</code> </p> <code>format</code> <p>description of y data being passed supports all permutations of the strings 'ohlc', 'oc', and 'hl'</p> <p> TYPE: <code>string (default: 'ohlc')</code> </p> <p>Note</p> <ul> <li>The fields which can be passed to the default tooltip are:<ul> <li>x: the x value associated with the bar/candle</li> <li>open: open value for the bar/candle</li> <li>high: high value for the bar/candle</li> <li>low: low value for the bar/candle</li> <li>close: close value for the bar/candle</li> <li>index: index of the bar/candle being hovered on</li> </ul> </li> </ul>"},{"location":"api/marks/#bqplot.Pie","title":"<code>bqplot.Pie</code>","text":"<p>         Bases: <code>Mark</code></p> <p>Piechart mark.</p>"},{"location":"api/marks/#bqplot.Pie--data-attributes","title":"Data Attributes","text":"ATTRIBUTE DESCRIPTION <code>sizes</code> <p>proportions of the pie slices</p> <p> TYPE: <code>numpy.ndarray (default: [])</code> </p> <code>color</code> <p>color of the data points. Defaults to colors when not provided.</p> <p> TYPE: <code>numpy.ndarray or None (default: None)</code> </p>"},{"location":"api/marks/#bqplot.Pie--style-attributes","title":"Style Attributes","text":"ATTRIBUTE DESCRIPTION <code>colors</code> <p>list of colors for the slices.</p> <p> TYPE: <code>list of colors (default: CATEGORY10)</code> </p> <code>stroke</code> <p>stroke color for the marker</p> <p> TYPE: <code>color (default: 'white')</code> </p> <code>opacities</code> <p>Opacities for the slices of the Pie mark. Defaults to 1 when the list is too short, or the element of the list is set to None.</p> <p> TYPE: <code>list of floats (default: [])</code> </p> <code>sort</code> <p>sort the pie slices by descending sizes</p> <p> TYPE: <code>bool (default: False)</code> </p> <code>x</code> <p>horizontal position of the pie center, in data coordinates or in figure coordinates</p> <p> TYPE: <code>Float (default: 0.5) or Date</code> </p> <code>y</code> <p>vertical y position of the pie center, in data coordinates or in figure coordinates</p> <p> TYPE: <code>Float (default: 0.5)</code> </p> <code>radius</code> <p>radius of the pie, in pixels</p> <p> TYPE: <code>Float</code> </p> <code>inner_radius</code> <p>inner radius of the pie, in pixels</p> <p> TYPE: <code>Float</code> </p> <code>start_angle</code> <p>start angle of the pie (from top), in degrees</p> <p> TYPE: <code>Float (default: 0.0)</code> </p> <code>end_angle</code> <p>end angle of the pie (from top), in degrees</p> <p> TYPE: <code>Float (default: 360.0)</code> </p> <code>display_labels</code> <p>label display options</p> <p> TYPE: <code>{'none', 'inside', 'outside'} (default: 'inside')</code> </p> <code>display_values</code> <p>if True show values along with labels</p> <p> TYPE: <code>bool (default: False)</code> </p> <code>values_format</code> <p>format for displaying values</p> <p> TYPE: <code>string (default: '.2f')</code> </p> <code>label_color</code> <p>color of the labels</p> <p> TYPE: <code>Color or None (default: None)</code> </p> <code>font_size</code> <p>label font size in px, em or ex</p> <p> TYPE: <code>string (default: '14px')</code> </p> <code>font_weight</code> <p>label font weight</p> <p> TYPE: <code>{'bold', 'normal', 'bolder'} (default: 'normal')</code> </p>"},{"location":"api/marks/#bqplot.Map","title":"<code>bqplot.Map</code>","text":"<p>         Bases: <code>Mark</code></p> <p>Map mark.</p>"},{"location":"api/marks/#bqplot.Map--data-attributes","title":"Data Attributes","text":"ATTRIBUTE DESCRIPTION <code>color</code> <p>dictionary containing the data associated with every country for the color scale</p> <p> TYPE: <code>Dict or None (default: None)</code> </p>"},{"location":"api/marks/#bqplot.Map--style-attributes","title":"Style Attributes","text":"ATTRIBUTE DESCRIPTION <code>colors</code> <p>default colors for items of the map when no color data is passed. The dictionary should be indexed by the id of the element and have the corresponding colors as values. The key <code>default_color</code> controls the items for which no color is specified.</p> <p> TYPE: <code>Dict (default: {})</code> </p> <code>selected_styles</code> <p> TYPE: <code>Dict (default: {'selected_fill': 'Red',</code> </p> <code>selected_stroke</code> <p>Dictionary containing the styles for selected subunits</p> <p> TYPE: <code>None, 'selected_stroke_width': 2.0})</code> </p> <code>hovered_styles</code> <p> TYPE: <code>Dict (default: {'hovered_fill': 'Orange',</code> </p> <code>hovered_stroke</code> <p>Dictionary containing the styles for hovered subunits</p> <p> TYPE: <code>None, 'hovered_stroke_width': 2.0})</code> </p> <code>hover_highlight</code> <p>boolean to control if the map should be aware of which country is being hovered on.</p> <p> TYPE: <code>bool (default: True)</code> </p> <code>map_data</code> <p>a topojson-formatted dictionary with the objects to map under the key 'subunits'.</p> <p> TYPE: <code>dict (default: topo_load(\"map_data/WorldMap.json\"))</code> </p>"},{"location":"api/pyplot/","title":"Pyplot","text":""},{"location":"api/pyplot/#bqplot.pyplot.figure","title":"<code>bqplot.pyplot.figure(key=None, fig=None, **kwargs)</code>","text":"<p>Creates figures and switches between figures.</p> <p>If a <code>bqplot.Figure</code> object is provided via the fig optional argument, this figure becomes the current context figure.</p> <p>Otherwise:</p> <ul> <li>If no key is provided, a new empty context figure is created.</li> <li>If a key is provided for which a context already exists, the   corresponding context becomes current.</li> <li>If a key is provided and no corresponding context exists, a new context   is reated for that key and becomes current.</li> </ul> <p>Besides, optional arguments allow to set or modify Attributes of the selected context figure.</p> PARAMETER DESCRIPTION <code>key</code> <p>Any variable that can be used as a key for a dictionary</p> <p> DEFAULT: <code>None</code> </p> <code>fig</code> <p>A bqplot Figure</p> <p> DEFAULT: <code>None</code> </p>"},{"location":"api/pyplot/#bqplot.pyplot.show","title":"<code>bqplot.pyplot.show(key=None, display_toolbar=True)</code>","text":"<p>Shows the current context figure in the output area.</p> PARAMETER DESCRIPTION <code>key</code> <p>Any variable that can be used as a key for a dictionary.</p> <p> TYPE: <code>hashable, optional</code> DEFAULT: <code>None</code> </p> <code>display_toolbar</code> <p>If True, a toolbar for different mouse interaction is displayed with the figure.</p> <p> DEFAULT: <code>True</code> </p> RAISES DESCRIPTION <code>KeyError</code> <p>When no context figure is associated with the provided key.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; import pyplot as plt\n&gt;&gt;&gt; n = 100\n&gt;&gt;&gt; x = np.arange(n)\n&gt;&gt;&gt; y = np.cumsum(np.random.randn(n))\n&gt;&gt;&gt; plt.plot(x,y)\n&gt;&gt;&gt; plt.show()\n</code></pre>"},{"location":"api/pyplot/#bqplot.pyplot.axes","title":"<code>bqplot.pyplot.axes(mark=None, options={}, **kwargs)</code>","text":"<p>Draws axes corresponding to the scales of a given mark.</p> <p>It also returns a dictionary of drawn axes. If the mark is not provided, the last drawn mark is used.</p> PARAMETER DESCRIPTION <code>mark</code> <p>The mark to inspect to create axes. If None, the last mark drawn is used instead.</p> <p> DEFAULT: <code>None</code> </p> <code>options</code> <p>Options for the axes to be created. If a scale labeled 'x' is required for that mark, options['x'] contains optional keyword arguments for the constructor of the corresponding axis type.</p> <p> DEFAULT: <code>{}</code> </p>"},{"location":"api/pyplot/#bqplot.pyplot.plot","title":"<code>bqplot.pyplot.plot(*args, **kwargs)</code>","text":"<p>Draw lines in the current context figure.</p> <p>Signature: <code>plot(x, y, **kwargs)</code> or <code>plot(y, **kwargs)</code>, depending of the length of the list of positional arguments. In the case where the <code>x</code> array is not provided.</p> PARAMETER DESCRIPTION <code>x</code> <p>The x-coordinates of the plotted line. When not provided, the function defaults to <code>numpy.arange(len(y))</code> x can be 1-dimensional or 2-dimensional.</p> <p> </p> <code>y</code> <p>The y-coordinates of the plotted line. If argument <code>x</code> is 2-dimensional it must also be 2-dimensional.</p> <p> </p> <code>marker_str</code> <p>string representing line_style, marker and color. For e.g. 'g--o', 'sr' etc</p> <p> </p> <code>options</code> <p>Options for the scales to be created. If a scale labeled 'x' is required for that mark, options['x'] contains optional keyword arguments for the constructor of the corresponding scale type.</p> <p> </p> <code>axes_options</code> <p>Options for the axes to be created. If an axis labeled 'x' is required for that mark, axes_options['x'] contains optional keyword arguments for the constructor of the corresponding axis type.</p> <p> </p> <code>figure</code> <p>The figure to which the line is to be added. If the value is None, the current figure is used.</p> <p> </p>"},{"location":"api/pyplot/#bqplot.pyplot.scatter","title":"<code>bqplot.pyplot.scatter(x, y, **kwargs)</code>","text":"<p>Draw a scatter in the current context figure.</p> PARAMETER DESCRIPTION <code>x</code> <p>The x-coordinates of the data points.</p> <p> </p> <code>y</code> <p>The y-coordinates of the data points.</p> <p> </p> <code>options</code> <p>Options for the scales to be created. If a scale labeled 'x' is required for that mark, options['x'] contains optional keyword arguments for the constructor of the corresponding scale type.</p> <p> </p> <code>axes_options</code> <p>Options for the axes to be created. If an axis labeled 'x' is required for that mark, axes_options['x'] contains optional keyword arguments for the constructor of the corresponding axis type.</p> <p> </p>"},{"location":"api/pyplot/#bqplot.pyplot.hist","title":"<code>bqplot.pyplot.hist(sample, options={}, **kwargs)</code>","text":"<p>Draw a histogram in the current context figure.</p> PARAMETER DESCRIPTION <code>sample</code> <p>The sample for which the histogram must be generated.</p> <p> </p> <code>options</code> <p>Options for the scales to be created. If a scale labeled 'counts' is required for that mark, options['counts'] contains optional keyword arguments for the constructor of the corresponding scale type.</p> <p> DEFAULT: <code>{}</code> </p> <code>axes_options</code> <p>Options for the axes to be created. If an axis labeled 'counts' is required for that mark, axes_options['counts'] contains optional keyword arguments for the constructor of the corresponding axis type.</p> <p> </p>"},{"location":"api/pyplot/#bqplot.pyplot.bar","title":"<code>bqplot.pyplot.bar(x, y, **kwargs)</code>","text":"<p>Draws a bar chart in the current context figure.</p> PARAMETER DESCRIPTION <code>x</code> <p>The x-coordinates of the data points.</p> <p> </p> <code>y</code> <p>The y-coordinates of the data pints.</p> <p> </p> <code>options</code> <p>Options for the scales to be created. If a scale labeled 'x' is required for that mark, options['x'] contains optional keyword arguments for the constructor of the corresponding scale type.</p> <p> </p> <code>axes_options</code> <p>Options for the axes to be created. If an axis labeled 'x' is required for that mark, axes_options['x'] contains optional keyword arguments for the constructor of the corresponding axis type.</p> <p> </p>"},{"location":"api/pyplot/#bqplot.pyplot.ohlc","title":"<code>bqplot.pyplot.ohlc(*args, **kwargs)</code>","text":"<p>Draw OHLC bars or candle bars in the current context figure.</p> <p>Signature: <code>ohlc(x, y, **kwargs)</code> or <code>ohlc(y, **kwargs)</code>, depending of the length of the list of positional arguments. In the case where the <code>x</code> array is not provided</p> PARAMETER DESCRIPTION <code>x</code> <p>The x-coordinates of the plotted line. When not provided, the function defaults to <code>numpy.arange(len(y))</code>.</p> <p> </p> <code>y</code> <p>The ohlc (open/high/low/close) information. A two dimensional array. y must have the shape (n, 4).</p> <p> </p> <code>options</code> <p>Options for the scales to be created. If a scale labeled 'x' is required for that mark, options['x'] contains optional keyword arguments for the constructor of the corresponding scale type.</p> <p> </p> <code>axes_options</code> <p>Options for the axes to be created. If an axis labeled 'x' is required for that mark, axes_options['x'] contains optional keyword arguments for the constructor of the corresponding axis type.</p> <p> </p>"},{"location":"api/pyplot/#bqplot.pyplot.geo","title":"<code>bqplot.pyplot.geo(map_data, **kwargs)</code>","text":"<p>Draw a map in the current context figure.</p> PARAMETER DESCRIPTION <code>map_data</code> <p>Name of the map or json file required for the map data.</p> <p> </p> <code>options</code> <p>Options for the scales to be created. If a scale labeled 'x' is required for that mark, options['x'] contains optional keyword arguments for the constructor of the corresponding scale type.</p> <p> </p> <code>axes_options</code> <p>Options for the axes to be created. If an axis labeled 'x' is required for that mark, axes_options['x'] contains optional keyword arguments for the constructor of the corresponding axis type.</p> <p> </p>"},{"location":"api/pyplot/#bqplot.pyplot.clear","title":"<code>bqplot.pyplot.clear()</code>","text":"<p>Clears the current context figure of all marks axes and grid lines.</p>"},{"location":"api/pyplot/#bqplot.pyplot.close","title":"<code>bqplot.pyplot.close(key)</code>","text":"<p>Closes and unregister the context figure corresponding to the key.</p> PARAMETER DESCRIPTION <code>key</code> <p>Any variable that can be used as a key for a dictionary</p> <p> </p>"},{"location":"api/pyplot/#bqplot.pyplot.current_figure","title":"<code>bqplot.pyplot.current_figure()</code>","text":"<p>Returns the current context figure.</p>"},{"location":"api/pyplot/#bqplot.pyplot.scales","title":"<code>bqplot.pyplot.scales(key=None, scales={})</code>","text":"<p>Creates and switches between context scales.</p> <p>If no key is provided, a new blank context is created.</p> <p>If a key is provided for which a context already exists, the existing context is set as the current context.</p> <p>If a key is provided and no corresponding context exists, a new context is created for that key and set as the current context.</p> PARAMETER DESCRIPTION <code>key</code> <p>Any variable that can be used as a key for a dictionary</p> <p> DEFAULT: <code>None</code> </p> <code>scales</code> <p>Dictionary of scales to be used in the new context</p> <p> DEFAULT: <code>{}</code> </p>"},{"location":"api/pyplot/#bqplot.pyplot.scales--example","title":"Example","text":"<pre><code>&gt;&gt;&gt; scales(scales={\n&gt;&gt;&gt;    'x': Keep,\n&gt;&gt;&gt;    'color': ColorScale(min=0, max=1)\n&gt;&gt;&gt; })\n</code></pre> <p>This creates a new scales context, where the 'x' scale is kept from the previous context, the 'color' scale is an instance of ColorScale provided by the user. Other scales, potentially needed such as the 'y' scale in the case of a line chart will be created on the fly when needed.</p>"},{"location":"api/pyplot/#bqplot.pyplot.scales--notes","title":"Notes","text":"<p>Every call to the function figure triggers a call to scales.</p> <p>The <code>scales</code> parameter is ignored if the <code>key</code> argument is not Keep and context scales already exist for that key.</p>"},{"location":"api/pyplot/#bqplot.pyplot.xlim","title":"<code>bqplot.pyplot.xlim(min, max)</code>","text":"<p>Set the domain bounds of the current 'x' scale.</p>"},{"location":"api/pyplot/#bqplot.pyplot.ylim","title":"<code>bqplot.pyplot.ylim(min, max)</code>","text":"<p>Set the domain bounds of the current 'y' scale.</p>"},{"location":"api/pyplot/#bqplot.pyplot.axes","title":"<code>bqplot.pyplot.axes(mark=None, options={}, **kwargs)</code>","text":"<p>Draws axes corresponding to the scales of a given mark.</p> <p>It also returns a dictionary of drawn axes. If the mark is not provided, the last drawn mark is used.</p> PARAMETER DESCRIPTION <code>mark</code> <p>The mark to inspect to create axes. If None, the last mark drawn is used instead.</p> <p> DEFAULT: <code>None</code> </p> <code>options</code> <p>Options for the axes to be created. If a scale labeled 'x' is required for that mark, options['x'] contains optional keyword arguments for the constructor of the corresponding axis type.</p> <p> DEFAULT: <code>{}</code> </p>"},{"location":"api/pyplot/#bqplot.pyplot.xlabel","title":"<code>bqplot.pyplot.xlabel(label=None, mark=None, **kwargs)</code>","text":"<p>Sets the value of label for an axis whose associated scale has the dimension <code>x</code>.</p> PARAMETER DESCRIPTION <code>label</code> <p>The label for x axis</p> <p> DEFAULT: <code>None</code> </p>"},{"location":"api/pyplot/#bqplot.pyplot.ylabel","title":"<code>bqplot.pyplot.ylabel(label=None, mark=None, **kwargs)</code>","text":"<p>Sets the value of label for an axis whose associated scale has the dimension <code>y</code>.</p> PARAMETER DESCRIPTION <code>label</code> <p>The label for y axis</p> <p> DEFAULT: <code>None</code> </p>"},{"location":"api/scales/","title":"Scales","text":""},{"location":"api/scales/#bqscales.Scale","title":"<code>bqscales.Scale</code>","text":"<p>         Bases: <code>Widget</code></p> <p>The base scale class.</p> <p>Scale objects represent a mapping between data (the domain) and a visual quantity (The range).</p> ATTRIBUTE DESCRIPTION <code>scale_types</code> <p>A registry of existing scale types.</p> <p> TYPE: <code>dict (class-level attribute)</code> </p> <code>domain_class</code> <p>traitlet type used to validate values in of the domain of the scale.</p> <p> TYPE: <code>type (default: Float)</code> </p> <code>reverse</code> <p>whether the scale should be reversed.</p> <p> TYPE: <code>bool (default: False)</code> </p> <code>allow_padding</code> <p>indicates whether figures are allowed to add data padding to this scale or not.</p> <p> TYPE: <code>bool (default: True)</code> </p> <code>precedence</code> <p>attribute used to determine which scale takes precedence in cases when two or more scales have the same rtype and dtype.</p> <p> TYPE: <code>int (class-level attribute)</code> </p>"},{"location":"api/scales/#bqscales.LinearScale","title":"<code>bqscales.LinearScale</code>","text":"<p>         Bases: <code>Scale</code></p> <p>A linear scale.</p> <p>An affine mapping from a numerical domain to a numerical range.</p> ATTRIBUTE DESCRIPTION <code>min</code> <p>if not None, min is the minimal value of the domain</p> <p> TYPE: <code>float or None (default: None)</code> </p> <code>max</code> <p>if not None, max is the maximal value of the domain</p> <p> TYPE: <code>float or None (default: None)</code> </p> <code>rtype</code> <p>This attribute should not be modified. The range type of a linear scale is numerical.</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>dtype</code> <p>the associated data type / domain type</p> <p> TYPE: <code>type (class-level attribute)</code> </p> <code>precedence</code> <p>attribute used to determine which scale takes precedence in cases when two or more scales have the same rtype and dtype. default_value is 2 because for the same range and domain types, LinearScale should take precedence.</p> <p> TYPE: <code>int (class-level attribute, default_value=2)</code> </p> <code>stabilized</code> <p>if set to False, the domain of the scale is tied to the data range if set to True, the domain of the scale is updated only when the data range is beyond certain thresholds, given by the attributes mid_range and min_range.</p> <p> TYPE: <code>bool (default: False)</code> </p> <code>mid_range</code> <p>Proportion of the range that is spanned initially. Used only if stabilized is True.</p> <p> TYPE: <code>float (default: 0.8)</code> </p> <code>min_range</code> <p>Minimum proportion of the range that should be spanned by the data. If the data span falls beneath that level, the scale is reset. min_range must be &lt;= mid_range. Used only if stabilized is True.</p> <p> TYPE: <code>float (default: 0.6)</code> </p>"},{"location":"api/scales/#bqscales.LogScale","title":"<code>bqscales.LogScale</code>","text":"<p>         Bases: <code>Scale</code></p> <p>A log scale.</p> <p>A logarithmic mapping from a numerical domain to a numerical range.</p> ATTRIBUTE DESCRIPTION <code>min</code> <p>if not None, min is the minimal value of the domain</p> <p> TYPE: <code>float or None (default: None)</code> </p> <code>max</code> <p>if not None, max is the maximal value of the domain</p> <p> TYPE: <code>float or None (default: None)</code> </p> <code>rtype</code> <p>This attribute should not be modified by the user. The range type of a linear scale is numerical.</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>dtype</code> <p>the associated data type / domain type</p> <p> TYPE: <code>type (class-level attribute)</code> </p>"},{"location":"api/scales/#bqscales.DateScale","title":"<code>bqscales.DateScale</code>","text":"<p>         Bases: <code>Scale</code></p> <p>A date scale, with customizable formatting.</p> <p>An affine mapping from dates to a numerical range.</p> ATTRIBUTE DESCRIPTION <code>min</code> <p>if not None, min is the minimal value of the domain</p> <p> TYPE: <code>Date or None (default: None)</code> </p> <code>max</code> <p>if not None, max is the maximal value of the domain</p> <p> TYPE: <code>Date (default: None)</code> </p> <code>domain_class</code> <p>traitlet type used to validate values in of the domain of the scale.</p> <p> TYPE: <code>type (default: Date)</code> </p> <code>rtype</code> <p>This attribute should not be modified by the user. The range type of a linear scale is numerical.</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>dtype</code> <p>the associated data type / domain type</p> <p> TYPE: <code>type (class-level attribute)</code> </p>"},{"location":"api/scales/#bqscales.OrdinalScale","title":"<code>bqscales.OrdinalScale</code>","text":"<p>         Bases: <code>Scale</code></p> <p>An ordinal scale.</p> <p>A mapping from a discrete set of values to a numerical range.</p> ATTRIBUTE DESCRIPTION <code>domain</code> <p>The discrete values mapped by the ordinal scale</p> <p> TYPE: <code>list (default: [])</code> </p> <code>rtype</code> <p>This attribute should not be modified by the user. The range type of a linear scale is numerical.</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>dtype</code> <p>the associated data type / domain type</p> <p> TYPE: <code>type (class-level attribute)</code> </p>"},{"location":"api/scales/#bqscales.ColorScale","title":"<code>bqscales.ColorScale</code>","text":"<p>         Bases: <code>Scale</code></p> <p>A color scale.</p> <p>A mapping from numbers to colors. The relation is affine by part.</p> ATTRIBUTE DESCRIPTION <code>scale_type</code> <p>scale type</p> <p> TYPE: <code>{'linear'}</code> </p> <code>colors</code> <p>list of colors</p> <p> TYPE: <code>list of colors (default: [])</code> </p> <code>min</code> <p>if not None, min is the minimal value of the domain</p> <p> TYPE: <code>float or None (default: None)</code> </p> <code>max</code> <p>if not None, max is the maximal value of the domain</p> <p> TYPE: <code>float or None (default: None)</code> </p> <code>mid</code> <p>if not None, mid is the value corresponding to the mid color.</p> <p> TYPE: <code>float or None (default: None)</code> </p> <code>scheme</code> <p>Colorbrewer color scheme of the color scale.</p> <p> TYPE: <code>string (default: 'RdYlGn')</code> </p> <code>extrapolation</code> <p>How to extrapolate values outside the [min, max] domain.</p> <p> TYPE: <code>{'constant', 'linear'} (default: 'constant')</code> </p> <code>rtype</code> <p>The range type of a color scale is 'Color'. This should not be modified.</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>dtype</code> <p>the associated data type / domain type</p> <p> TYPE: <code>type (class-level attribute)</code> </p>"},{"location":"api/scales/#bqscales.DateColorScale","title":"<code>bqscales.DateColorScale</code>","text":"<p>         Bases: <code>ColorScale</code></p> <p>A date color scale.</p> <p>A mapping from dates to a numerical domain.</p> ATTRIBUTE DESCRIPTION <code>min</code> <p>if not None, min is the minimal value of the domain</p> <p> TYPE: <code>Date or None (default: None)</code> </p> <code>max</code> <p>if not None, max is the maximal value of the domain</p> <p> TYPE: <code>Date or None (default: None)</code> </p> <code>mid</code> <p>if not None, mid is the value corresponding to the mid color.</p> <p> TYPE: <code>Date or None (default: None)</code> </p> <code>rtype</code> <p>This attribute should not be modified by the user. The range type of a color scale is 'Color'.</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>dtype</code> <p>the associated data type / domain type</p> <p> TYPE: <code>type (class-level attribute)</code> </p>"},{"location":"api/scales/#bqscales.OrdinalColorScale","title":"<code>bqscales.OrdinalColorScale</code>","text":"<p>         Bases: <code>ColorScale</code></p> <p>An ordinal color scale.</p> <p>A mapping from a discrete set of values to colors.</p> ATTRIBUTE DESCRIPTION <code>domain</code> <p>The discrete values mapped by the ordinal scales.</p> <p> TYPE: <code>list (default: [])</code> </p> <code>rtype</code> <p>This attribute should not be modified by the user. The range type of a color scale is 'color'.</p> <p> TYPE: <code>string (class-level attribute)</code> </p> <code>dtype</code> <p>the associated data type / domain type</p> <p> TYPE: <code>type (class-level attribute)</code> </p>"},{"location":"api/scales/#bqscales.GeoScale","title":"<code>bqscales.GeoScale</code>","text":"<p>         Bases: <code>Scale</code></p> <p>The base projection scale class for Map marks.</p> <p>The GeoScale represents a mapping between topographic data and a 2d visual representation.</p>"},{"location":"api/scales/#bqscales.Orthographic","title":"<code>bqscales.Orthographic</code>","text":"<p>         Bases: <code>GeoScale</code></p> <p>A perspective projection that depicts a hemisphere as it appears from outer space.</p> <p>The projection is neither equal-area nor conformal.</p> ATTRIBUTE DESCRIPTION <code>scale_factor</code> <p>Specifies the scale value for the projection</p> <p> TYPE: <code>float (default: 145)</code> </p> <code>center</code> <p>Specifies the longitude and latitude where the map is centered.</p> <p> TYPE: <code>tuple (default: (0, 60))</code> </p> <code>rotate</code> <p>Degree of rotation in each axis.</p> <p> TYPE: <code>tuple (default: (96, 0))</code> </p> <code>clip_angle</code> <p>Specifies the clipping circle radius to the specified angle in degrees.</p> <p> TYPE: <code>float (default: 90.)</code> </p> <code>precision</code> <p>Specifies the threshold for the projections adaptive resampling to the specified value in pixels.</p> <p> TYPE: <code>float (default: 0.1)</code> </p>"},{"location":"api/scales/#bqscales.Mercator","title":"<code>bqscales.Mercator</code>","text":"<p>         Bases: <code>GeoScale</code></p> <p>A geographical projection scale commonly used for world maps.</p> <p>The Mercator projection is a cylindrical map projection which ensures that any course of constant bearing is a straight line.</p> ATTRIBUTE DESCRIPTION <code>scale_factor</code> <p>Specifies the scale value for the projection</p> <p> TYPE: <code>float (default: 190)</code> </p> <code>center</code> <p>Specifies the longitude and latitude where the map is centered.</p> <p> TYPE: <code>tuple (default: (0, 60))</code> </p> <code>rotate</code> <p>Degree of rotation in each axis.</p> <p> TYPE: <code>tuple (default: (0, 0))</code> </p> <code>rtype</code> <p>This attribute should not be modified. The range type of a geo scale is a tuple.</p> <p> TYPE: <code>(Number, Number) (class-level attribute)</code> </p> <code>dtype</code> <p>the associated data type / domain type</p> <p> TYPE: <code>type (class-level attribute)</code> </p>"},{"location":"api/scales/#bqscales.Albers","title":"<code>bqscales.Albers</code>","text":"<p>         Bases: <code>GeoScale</code></p> <p>A geographical scale which is an alias for a conic equal area projection.</p> <p>The Albers projection is a conic equal area map. It does not preserve scale or shape, though it is recommended for chloropleths since it preserves the relative areas of geographic features. Default values are US-centric.</p> ATTRIBUTE DESCRIPTION <code>scale_factor</code> <p>Specifies the scale value for the projection</p> <p> TYPE: <code>float (default: 250)</code> </p> <code>rotate</code> <p>Degree of rotation in each axis.</p> <p> TYPE: <code>tuple (default: (96, 0))</code> </p> <code>parallels</code> <p>Sets the two parallels for the conic projection.</p> <p> TYPE: <code>tuple (default: (29.5, 45.5))</code> </p> <code>center</code> <p>Specifies the longitude and latitude where the map is centered.</p> <p> TYPE: <code>tuple (default: (0, 60))</code> </p> <code>precision</code> <p>Specifies the threshold for the projections adaptive resampling to the specified value in pixels.</p> <p> TYPE: <code>float (default: 0.1)</code> </p> <code>rtype</code> <p>This attribute should not be modified. The range type of a geo scale is a tuple.</p> <p> TYPE: <code>(Number, Number) (class-level attribute)</code> </p> <code>dtype</code> <p>the associated data type / domain type</p> <p> TYPE: <code>type (class-level attribute)</code> </p>"},{"location":"api/scales/#bqscales.AlbersUSA","title":"<code>bqscales.AlbersUSA</code>","text":"<p>         Bases: <code>GeoScale</code></p> <p>A composite projection of four Albers projections meant specifically for the United States.</p> ATTRIBUTE DESCRIPTION <code>scale_factor</code> <p>Specifies the scale value for the projection</p> <p> TYPE: <code>float (default: 1200)</code> </p> <code>translate</code> <p> TYPE: <code>tuple (default: (600, 490))</code> </p> <code>rtype</code> <p>This attribute should not be modified. The range type of a geo scale is a tuple.</p> <p> TYPE: <code>(Number, Number) (class-level attribute)</code> </p> <code>dtype</code> <p>the associated data type / domain type</p> <p> TYPE: <code>type (class-level attribute)</code> </p>"},{"location":"api/scales/#bqscales.Gnomonic","title":"<code>bqscales.Gnomonic</code>","text":"<p>         Bases: <code>GeoScale</code></p> <p>A perspective projection which displays great circles as straight lines.</p> <p>The projection is neither equal-area nor conformal.</p> ATTRIBUTE DESCRIPTION <code>scale_factor</code> <p>Specifies the scale value for the projection</p> <p> TYPE: <code>float (default: 145)</code> </p> <code>center</code> <p>Specifies the longitude and latitude where the map is centered.</p> <p> TYPE: <code>tuple (default: (0, 60))</code> </p> <code>precision</code> <p>Specifies the threshold for the projections adaptive resampling to the specified value in pixels.</p> <p> TYPE: <code>float (default: 0.1)</code> </p> <code>clip_angle</code> <p>Specifies the clipping circle radius to the specified angle in degrees.</p> <p> TYPE: <code>float (default: 89.999)</code> </p>"},{"location":"api/scales/#bqscales.Stereographic","title":"<code>bqscales.Stereographic</code>","text":"<p>         Bases: <code>GeoScale</code></p> <p>A perspective projection that uses a bijective and smooth map at every point except the projection point.</p> <p>The projection is not an equal-area projection but it is conformal.</p> ATTRIBUTE DESCRIPTION <code>scale_factor</code> <p>Specifies the scale value for the projection</p> <p> TYPE: <code>float (default: 250)</code> </p> <code>rotate</code> <p>Degree of rotation in each axis.</p> <p> TYPE: <code>tuple (default: (96, 0))</code> </p> <code>center</code> <p>Specifies the longitude and latitude where the map is centered.</p> <p> TYPE: <code>tuple (default: (0, 60))</code> </p> <code>precision</code> <p>Specifies the threshold for the projections adaptive resampling to the specified value in pixels.</p> <p> TYPE: <code>float (default: 0.1)</code> </p> <code>clip_angle</code> <p>Specifies the clipping circle radius to the specified angle in degrees.</p> <p> TYPE: <code>float (default: 90.)</code> </p>"},{"location":"api/scales/#bqscales.EquiRectangular","title":"<code>bqscales.EquiRectangular</code>","text":"<p>         Bases: <code>GeoScale</code></p> <p>An elementary projection that uses the identity function.</p> <p>The projection is neither equal-area nor conformal.</p> ATTRIBUTE DESCRIPTION <code>scale_factor</code> <p>Specifies the scale value for the projection</p> <p> TYPE: <code>float (default: 145)</code> </p> <code>center</code> <p>Specifies the longitude and latitude where the map is centered.</p> <p> TYPE: <code>tuple (default: (0, 60))</code> </p>"},{"location":"api/toolbar/","title":"Toolbar","text":""},{"location":"api/toolbar/#bqplot.toolbar.Toolbar","title":"<code>bqplot.toolbar.Toolbar</code>","text":"<p>         Bases: <code>DOMWidget</code></p> <p>Default toolbar for bqplot figures.</p> <p>The default toolbar provides three buttons:</p> <ul> <li>A Panzoom toggle button which enables panning and zooming the figure.</li> <li>A Save button to save the figure as a png image.</li> <li>A Reset button, which resets the figure position to its original   state.</li> </ul> <p>When the Panzoom button is toggled to True for the first time, a new instance of <code>PanZoom</code> widget is created. The created <code>PanZoom</code> widget uses the scales of all the marks that are on the figure at this point. When the PanZoom widget is toggled to False, the figure retrieves its previous interaction. When the Reset button is pressed, the <code>PanZoom</code> widget is deleted and the figure scales reset to their initial state. We are back to the case where the PanZoom widget has never been set.</p> <p>If new marks are added to the figure after the panzoom button is toggled, and these use new scales, those scales will not be panned or zoomed, unless the reset button is clicked.</p> ATTRIBUTE DESCRIPTION <code>figure</code> <p>The figure to which the toolbar will apply.</p> <p> TYPE: <code>instance of Figure</code> </p>"},{"location":"usage/pyplot/","title":"Pyplot","text":""},{"location":"usage/pyplot/#pyplot-api","title":"<code>pyplot</code> API","text":"<p><code>pyplot</code> is a context based functional API offering meaningful defaults. It's a concise API and very similar to matplotlib's pyplot. Users new to bqplot should use <code>pyplot</code> as a starting point. </p> <p>Steps for building plots in <code>pyplot</code>:</p> <ol> <li>Create a figure object using <code>plt.figure</code></li> <li>(Optional steps)<ul> <li>Scales can be customized using <code>plt.scales</code> function (by default <code>LinearScale</code> instances are created for all data attributes)</li> <li>Axes options can customized by passing a dict to axes_options argument in the marks' functions</li> </ul> </li> <li>Create marks using pyplot functions like <code>plt.plot</code>, <code>plt.bar</code>, <code>plt.scatter</code> etc. (All the marks created will be automatically added to the figure object created in step 1)</li> <li>Render the figure object using the following approaches:<ul> <li>Using plt.show function which renders the figure in the current context along with toolbar for panzoom etc.</li> <li>Using <code>display</code> on the figure object created in step 1 (toolbar doesn't show up in this case)</li> </ul> </li> </ol> <p><code>pyplot</code> comes with many helper functions. A few are listed below:</p> <ul> <li><code>plt.xlim</code>: sets the domain bounds of the current x scale</li> <li><code>plt.ylim</code>: sets the domain bounds of the current y scale</li> <li><code>plt.grids</code>: shows/hides the axis grid lines</li> <li><code>plt.xlabel</code>: sets the X-Axis label</li> <li><code>plt.ylabel</code>: sets the Y-Axis label</li> <li><code>plt.hline</code>: draws a horizontal line at a specified level</li> <li><code>plt.vline</code>: draws a vertical line at a specified level</li> </ul> <p>Let's look at a few examples (<code>Object Model</code> usage available here):</p>"},{"location":"usage/pyplot/#line-chart","title":"Line Chart","text":"<p><pre><code>import bqplot.pyplot as plt\nimport numpy as np\n# create data vectors x and y to plot using a Lines mark\nx = np.linspace(-10, 10, 100)\ny = np.sin(x)\n# 1. Create the figure object\nfig = plt.figure(title=\"Line Chart\")\n# 2. By default axes are created with basic defaults. If you want to customize the axes create\n# a dict and pass it to axes_options argument in the marks\naxes_opts = {\"x\": {\"label\": \"X\"}, \"y\": {\"label\": \"Y\"}}\n# 3. Create a Lines mark by calling plt.plot function\nline = plt.plot(\nx=x, y=y, axes_options=axes_opts\n)  # note that custom axes options are passed to the mark function\n# 4. Render the figure using plt.show() (displays toolbar as well)\nplt.show()\n</code></pre> </p>"},{"location":"usage/pyplot/#bar-chart","title":"Bar Chart","text":"<p>For creating other marks (like scatter, pie, bars, etc.), only step 2 needs to be changed. Lets look an example to create a bar chart: <pre><code># first, create data vectors x and y to plot a bar chart\nx = list(\"ABCDE\")\ny = np.random.rand(5)\n# 1. Create the figure object\nfig = plt.figure(title=\"Bar Chart\")\n# 2. Customize the axes options\naxes_opts = {\n\"x\": {\"label\": \"X\", \"grid_lines\": \"none\"},\n\"y\": {\"label\": \"Y\", \"tick_format\": \".0%\"},\n}\n# 3. Create a Bars mark by calling plt.bar function\nbar = plt.bar(x=x, y=y, padding=0.5, axes_options=axes_opts)\n# 4. directly display the figure object created in step 1 (note that the toolbar no longer shows up)\nfig\n</code></pre> </p>"},{"location":"usage/pyplot/#multiple-marks","title":"Multiple Marks","text":"<p>Multiple marks can be rendered in the same figure. It's as easy as creating marks one after another. They'll all be added to the same figure!</p> <p><pre><code># first, let's create two vectors x and y\nx = np.linspace(-10, 10, 25)\ny = 3 * x + 5\ny_noise = y + 10 * np.random.randn(25)  # add some random noise to y\n# 1. Create the figure object\nfig = plt.figure(title=\"Scatter and Line\")\n# 3. Create line and scatter marks\n# additional attributes (stroke_width, colors etc.) can be passed as attributes \n# to the mark objects as needed\nline = plt.plot(x=x, y=y, colors=[\"green\"], stroke_width=3)\nscatter = plt.scatter(x=x, y=y_noise, colors=[\"red\"], stroke=\"black\")\n# setting x and y axis labels using pyplot functions. Note that these functions\n# should be called only after creating the marks\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\n# 4. render the figure\nfig\n</code></pre> </p>"},{"location":"usage/pyplot/#summary","title":"Summary","text":"<p>pyplot is a simple and intuitive API. It's available for all the marks except MarketMap. It should be used in almost all the cases by default since it offers a concise API compared to the Object Model. For detailed usage refer to the mark examples using pyplot</p>"}]}